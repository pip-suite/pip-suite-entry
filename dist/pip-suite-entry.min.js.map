{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/change_password/ChangePassword.ts","src/change_password/ChangePasswordDialog.ts","src/change_password/ChangePasswordModel.ts","src/change_password/ChangePasswordPanel.ts","src/change_password/ChangePasswordViewModel.ts","src/common/EmailUnique.ts","src/common/EntryCommonService.ts","src/common/EntryHideObject.ts","src/common/EntryInit.ts","src/common/EntryModel.ts","src/common/EntryPageConfig.ts","src/common/EntryService.ts","src/common/EntryStrings.ts","src/common/PasswordMatch.ts","src/common/index.ts","src/data/Account.ts","src/data/EmailSettings.ts","src/data/EntryDataService.ts","src/data/Enums.ts","src/data/Role.ts","src/data/Session.ts","src/data/SessionData.ts","src/data/SessionDataService.ts","src/data/index.ts","src/expire_change_password/ExpireChangePassword.ts","src/expire_change_password/ExpireChangePasswordDialog.ts","src/expire_change_password/ExpireChangePasswordModel.ts","src/expire_change_password/ExpireChangePasswordPanel.ts","src/expire_change_password/ExpireChangePasswordViewModel.ts","src/index.ts","src/post_signup/PostSignup.ts","src/post_signup/PostSignupDialog.ts","src/post_signup/PostSignupModel.ts","src/post_signup/PostSignupPanel.ts","src/post_signup/PostSignupViewModel.ts","src/recover_password/RecoverPassword.ts","src/recover_password/RecoverPasswordDialog.ts","src/recover_password/RecoverPasswordModel.ts","src/recover_password/RecoverPasswordPanel.ts","src/recover_password/RecoverPasswordViewModel.ts","src/reset_password/ResetPassword.ts","src/reset_password/ResetPasswordDialog.ts","src/reset_password/ResetPasswordModel.ts","src/reset_password/ResetPasswordPanel.ts","src/reset_password/ResetPasswordViewModel.ts","src/rest/EntryResources.ts","src/rest/SessionResources.ts","src/rest/SettingsResources.ts","src/rest/index.ts","src/signin/Signin.ts","src/signin/SigninDialog.ts","src/signin/SigninModel.ts","src/signin/SigninPanel.ts","src/signin/SigninViewModel.ts","src/signout/Signout.ts","src/signup/Signup.ts","src/signup/SignupDialog.ts","src/signup/SignupModel.ts","src/signup/SignupPanel.ts","src/signup/SignupViewModel.ts","src/verify_email/VerifyEmail.ts","src/verify_email/VerifyEmailModel.ts","temp/pip-suite-entry-html.min.js","src/verify_email/VerifyEmailViewModel.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","entry","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","ChangePasswordController","$inject","prototype","goBack","$window","history","back","pipChangePasswordViewModel","config","configurable","onChange","$state","pipEntryCommon","pipEntry","pipAuthState","pipSession","configureAppBar","passwordExpire","isOpened","go","signinState","angular","Object","defineProperty","value","ChangePasswordDialogService","show","params","successCallback","cancelCallback","$mdDialog","targetEvent","event","templateUrl","controller","ChangePasswordDialogController_1","enumerable","_this","cancel","_super","EntryModel_1","ChangePasswordModel","init","$scope","initModel","setElementVisability","hideObject","subTitle","Boolean","title","server","hint","progress","onShowToast","message","type","pipTranslate","translate","pipToasts","showError","showMessage","callback","form","$invalid","pipFormErrors","resetFormErrors","transactionId","transaction","begin","pipRest","lockServerUrl","serverUrl","data","pipEntryData","expireChangePassword","login","old_password","password","new_password","passwordNew","getUserId","aborted","String","end","signout","server_url","error","setFormError","NO_LOGIN","WRONG_LOGIN","LOGIN_NOT_FOUND","WRONG_PASSWORD","act_execute","UNKNOWN","-1","pipTransaction","$rootScope","$location","$injector","create","4","ChangePasswordPanel","ChangePasswordPanelController","$postLink","get","showServerError","onServerUrlChanged","selected","searchURLs","onChanged","resetFieldsErrors","onChangePassword","onChangePasswordNew","onChangePasswordConfirm","touchedErrorsWithHint","component","5","ChangePasswordViewModel","model","6","LinkEmailUnique_1","$element","$attrs","ngModel","$http","oldEmail","_","throttle","newValue","oldHint","$validators","emailUnique","$setValidity","signupValidate","err","directive","restrict","getLastUsedLogin","servers","localStorageService","getPastSessions","getUsedServerUrls","serverUrls","prop","hasOwnProperty","push","pipNavService","sidenav","hide","actions","appbar","part","showLanguage","appbarTitle","breadcrumb","text","addShadow","icon","search","close","pipAppBar","showIcon","appbarIcon","initScope","_config","adminOnly","fixedServerUrl","enableAvatar","useEmailAsLogin","entryHideObject","language","use","email","decodeURIComponent","auth","pipIdentity","identity","user","remember","name","resetCode","reset_code","showServerUrl","filterItem","item","getMatches","query","url","isEmpty","cloneDeep","toLowerCase","indexOf","filter","EntryCommonService","EntryPageConfig_1","EntryPageConfig","service","./EntryPageConfig","8","EntryHideObject","9","initEntry","pipDataCache","pipTimer","$on","services","SessionOpenedEvent","clear","reopenSession","run","10","EntryModel","extendStatics","setPrototypeOf","__proto__","Array","d","b","__","constructor","EntryService_1","EntryConfig","__extends","apply","arguments","EntryDataConfig","SigninParams","SignupParams","AuthSessionData","undefined","sessionId","userId","PastSession","./EntryService","12","restore","result","property","isObject","$cookies","storeToLocal","set","removeLocal","remove","storeToCookie","put","path","removeCookie","EntryService","isPostSignup","openSession","session","id","sessionState","setHeaders","x-session-id","storeKnownServer","open","theme","pipTheme","user_id","checkEmailVerification","settings","restoreSessionComplete","isFunction","restoreSession","getResource","session_id","setting","verified","goToUnauthorized","closeSession","stop","$cookieStore","$timeout","addOpenListener","newAppbarIcon","newAppbarTitle","newShowIcon","newShowLanguage","newAdminOnly","newFixedServerUrl","EntryProvider","isNull","_service","isUndefined","EntryHideObject_1","13","pipTranslateProvider","translations","FULLNAME","EMAIL","LOGIN","PASSWORD","LANGUAGE","GENDER","BIRTHDAY","LOCATION","VERIFY","CONTINUE","HINT_FULLNAME","HINT_PASSWORD","SIGNIN_HINT_PASSWORD","HINT_ABOUT","VERIFY_EMAIL","HINT_EMAIL","VERIFY_LOGIN","HINT_LOGIN","SIGNIN_TITLE","SIGNIN_NOT_MEMBER","SIGNIN_REMEMBER","SIGNIN_FORGOT_PASSWORD","SIGNIN_SIGNUP_HERE","SIGNUP_TITLE","SIGNUP_NOT_MEMBER","SIGNUP_TEXT_11","SIGNUP_PRIVACY","SIGNUP_TEXT_12","SIGNUP_SERVICES","SIGNUP_TEXT_2","SIGNUP_SIGNIN_HERE","SIGNUP_EMAIL_REGISTERED","SIGNUP_LOGIN_REGISTERED","SIGNUP_FULLNAME_WRONG","SIGNUP_EMAIL_WRONG","SIGNUP_LOGIN_WRONG","POST_SIGNUP_TITLE","POST_SIGNUP_TEXT_1","POST_SIGNUP_TEXT_2","RECOVER_PWD_TITLE","RECOVER_PWD_TEXT_1_LOGIN","RECOVER_PWD_TEXT_1_EMAIL","RECOVER_PWD_TEXT_2","RECOVER_PWD_RECOVER","RESET_PWD_PASSWORD","RESET_PWD_TEXT_LOGIN","RESET_PWD_TEXT_EMAIL","RESET_PWD_SUCCESS_TEXT","VERIFY_EMAIL_WAIT","VERIFY_EMAIL_TITLE","VERIFY_EMAIL_TEXT_1","VERIFY_EMAIL_TEXT_21","VERIFY_EMAIL_RESEND","VERIFY_EMAIL_TEXT_22","VERIFY_EMAIL_SUCCESS_TEXT","PASSWORD_MATCH","PASSWORD_CONFIRM","PASSWORD_SET","ENTRY_CHANGE_SERVER","ENTRY_SERVER_URL","ENTRY_RESET_CODE","ENTRY_VERIFICATION_CODE","ENTRY_NEW_PASSWORD","ENTRY_SET_PASSWORD","ENTRY_RESET_PASSWORD","ENTRY_FREE","ENTRY_REPEAT","CHANGE_PWD_PASSWORD","EXPIRE_CHANGE_PWD_PASSWORD","CHANGE_PWD_TEXT","EXPIRE_CHANGE_PWD_TEXT","ENTRY_CHANGE_PASSWORD","ENTRY_EXPIRE_CHANGE_PASSWORD","OLD_PASSWORD","NEW_PASSWORD_SET","NEW_PASSWORD_CONFIRM","CHANGE_PWD_SUCCESS_TEXT","EXPIRE_CHANGE_PWD_SUCCESS_TEXT","ERROR_EMAIL_INVALID","ERROR_LOGIN_INVALID","ERROR_PASSWORD_INVALID","MINLENGTH_PASSWORD","ERROR_FULLNAME_INVALID","ERROR_CODE_INVALID","ERROR_CODE_WRONG","ERROR_SERVER_INVALID","LANGUAGE_RUSSIAN","LANGUAGE_ENGLISH","ERROR_ACT_EXECUTE","ERROR_WRONG_LOGIN","ERROR_LOGIN_NOT_FOUND","ERROR_NO_LOGIN","ERROR_WRONG_PASSWORD","ERROR_WRONG_CODE","ERROR_INVALID_CODE","ERROR_NO_EMAIL","ERROR_NO_NAME","ERROR_ALREADY_EXIST","ERROR_LOGIN_ALREADY_USED","ERROR_ALREADY_EXIST_EMAIL","ERROR_WRONG_LOGIN_EMAIL","ERROR_NO_LOGIN_EMAIL","ERROR_SERVER","ERROR_ACCOUNT_LOCKED","ERROR_UNKNOWN","PASSWORD_IDENTICAL","$parse","scope","elm","attrs","ngModelCtrl","ERROR_compareTo","modelValue","viewValue","otherModelValue","otherModelValueGetter","compareTo","compareTo1","compareTo2","compareOldPassword","compareNewPassword","comparePasswordMatch","17","Account","EmailSettings","EntryData","signup","errorCallback","recoverPassword","resetPassword","param","save","requestEmailVerification","verifyEmail","readEmailSettings","saveSettingsKey","section","key","$stateParams","22","23","Session","25","SessionData","26","getSessionId","getSessions","RESOURCE","getUserSessions","RESOURCE_USER","RESOURCE_RESTORE","27","__export","m","./EntryDataService","./Enums","./IEntryDataService","./ISessionDataService","./Role","./Session","./SessionData","./SessionDataService","28","ExpireChangePasswordController","pipExpireChangePasswordViewModel","ExpireChangePasswordDialogController_1","controllerAs","locals","clickOutsideToClose","then","ExpireChangePasswordDialogService","ExpireChangePasswordModel","31","ExpireChangePasswordPanelController","ExpireChangePasswordPanel","ExpireChangePasswordViewModel","ExpireChangePasswordModel_1","33","$stateProvider","$locationProvider","$httpProvider","pipAuthStateProvider","state","RecoverPassword_1","RecoverPasswordController","ChangePassword_1","ExpireChangePassword_1","ResetPassword_1","ResetPasswordController","Signout_1","SignoutController","PostSignup_1","PostSignupController","VerifyEmail_1","VerifyEmailController","VerifyEmailSuccessController","signoutState","configEntryRoutes","./change_password/ChangePassword","./common","./data","./expire_change_password/ExpireChangePassword","./post_signup/PostSignup","./recover_password/RecoverPassword","./reset_password/ResetPassword","./rest","./signout/Signout","./verify_email/VerifyEmail","34","$onInit","onPostSignupSubmit","pipPostSignupViewModel","$party","PostSignupDialogService","PostSignupDialogController_1","PostSignupModel","successTitle","checkSupported","pipSystemInfo","has","pipErrorPageConfigService","configs","Unsupported","Active","browser","browserName","supported","version","errors","ErrorsUnsupportedState","37","PostSignupPanelController","onPictureChanged","$control","picture","onPictureCreated","$event","birthday","gender","Enums_1","NOT_SPECIFIED","location","PostSignupPanel","38","PostSignupViewModel","PostSignupModel_1","pipRecoverPasswordViewModel","onRecover","pipResetPasswordDialog","$broadcast","RecoverPasswordDialogService","RecoverPasswordDialogController_1","41","RecoverPasswordModel","subTitle1","subTitle2","gotoReset","42","RecoverPasswordPanel","RecoverPasswordPanelController","RecoverPasswordViewModel","RecoverPasswordModel_1","44","pipResetPasswordViewModel","onReset","ResetPasswordDialogController_1","ResetPasswordDialogService","ResetPasswordModel","WRONG_CODE","ResetPasswordPanel","bindings","ResetPasswordPanelController","48","ResetPasswordModel_1","ResetPasswordViewModel","./ResetPasswordModel","49","configEntryResources","pipRestProvider","registerOperation","registerCollection","method","isArray","registerPagedCollection","configSessionResources","configSettingsResources","./SessionResources","./SettingsResources","53","SigninConfig","SigninController_1","isSignin","54","SigninDialogService","SigninDialogController","pipSignupDialog","gotoRecoverPasswordDialog","pipRecoverPasswordDialog","pipGotoSignupDialog","gotoSignupDialog","pipGotoRecoverPasswordDialog","SinginModel","forgotPassword","browserVersion","split","Params","gotoSignup","gotoSignupPage","gotoRecoverPassword","inSigninComplete","change_pwd_time","expireDate","Date","nowDate","getTime","redirect_to","toState","toParams","goToAuthorized","onSignin","rememberDefault","ACCOUNT_LOCKED","../common/EntryPageConfig","56","$document","pipMedia","pipSigninViewModel","SigninPanel","elem","element","querySelector","parent","addClass","SigninPanelController","onEnter","keyCode","57","SigninViewModel","SigninModel_1","58","SignupConfig","SignupController_1","60","SignupDialogService","SignupDialogController","gotoSigninDialog","pipSigninDialog","gotoPostSignupDialog","pipPostSignupDialog","pipGotoSigninDialog","pipGotoPostSignupDialog","SingupModel","agreement","passwordConfirm","signin","gotoSignin","gotoSigninPage","onSignup","gotoPostSignup","regestryVerifyEmailKey","party_id","ALREADY_EXIST","NO_EMAIL","62","SignupPanel","SignupPanelController","pipSignupViewModel","onChangeEmail","field","isQuery","status","required","SignupViewModel","SignupModel_1","64","pipVerifyEmailViewModel","onCancel","onVerify","showValidateProgress","onContinue","WRONG_LOGIN_EMAIL","NO_LOGIN_EMAIL","INVALID_CODE","tid","VerifyEmailModel","../common/EntryModel","66","VerifyEmailModel_1","VerifyEmailViewModel","./VerifyEmailModel","67","$templateCache"],"mappings":"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","file":"pip-suite-entry.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { ChangePasswordViewModel } from './ChangePasswordViewModel';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class ChangePasswordController {\n\n    constructor(\n        $state: ng.ui.IStateService,\n        private pipChangePasswordViewModel: ChangePasswordViewModel,\n        pipEntryCommon: IEntryCommonService,\n        pipEntry: IEntryService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipSession: pip.services.ISessionService,\n        private $window: ng.IWindowService\n    ) {\n        \"ngInject\";\n\n        pipEntryCommon.configureAppBar();\n\n        if (pipEntry.passwordExpire === false || !pipSession.isOpened()) {\n            $state.go(pipAuthState.signinState(), {});\n        }\n    }\n\n    public goBack() {\n        this.$window.history.back();\n    }\n\n    public get config(): any {\n        return this.pipChangePasswordViewModel.config;\n    }\n\n    public onChange() {\n        this.pipChangePasswordViewModel.onChange();\n    }\n}\n\n{\n    angular.module('pipEntry.ChangePassword', ['pipEntry.Common', 'pipChangePasswordPanel']);\n\n}","import { ChangePasswordViewModel } from './ChangePasswordViewModel';\n\nexport interface IChangePasswordDialogService {\n    show(params: any, successCallback?: () => void, cancelCallback?: () => void): void;\n}\n\n{\n    class ChangePasswordDialogService implements IChangePasswordDialogService {\n        public constructor(private $mdDialog: angular.material.IDialogService) { };\n        public show(params: any, successCallback?: () => void, cancelCallback?: () => void) {\n            this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'change_password/ChangePasswordDialog.html',\n                controller: ChangePasswordDialogController,\n                controllerAs: '$ctrl',\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n                .then(() => {\n                    if (successCallback) {\n                        successCallback();\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    class ChangePasswordDialogController {\n        public goBack: any;\n\n        constructor(\n            $mdDialog: angular.material.IDialogService,\n            private pipChangePasswordViewModel: ChangePasswordViewModel\n        ) {\n            \"ngInject\";\n\n            this.goBack = $mdDialog.cancel;\n        }\n\n        public get config(): any {\n            return this.pipChangePasswordViewModel.config;\n        }\n\n        public onChange() {\n            this.pipChangePasswordViewModel.onChange(() => {\n                this.goBack();\n            });\n        }\n\n    }\n\n    angular.module('pipEntry.ChangePasswordDialog', ['pipEntry.Common', \"pipChangePasswordPanel\"])\n        .service('pipChangePasswordDialog', ChangePasswordDialogService);\n\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class ChangePasswordModel extends EntryModel {\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: IEntryDataService,\n        private pipEntry: IEntryService,\n        private pipToasts: pip.controls.IToastService\n    ) {\n        \"ngInject\";\n\n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.change_password');\n\n    }\n\n    public init($scope): void {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability(): void {\n        this.hideObject.subTitle = new Boolean(this.hideObject.subTitle) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    public onShowToast(message: string, type: string): void {\n        if (!message) return;\n        message = this.pipTranslate.translate(message);\n        type = type || 'message';\n\n        if (type == 'message') {\n            this.pipToasts.showMessage(message, null, null, null);\n            return;\n        }\n        if (type == 'error') {\n            this.pipToasts.showError(message, null, null, null, null);\n            return;\n        }\n    }\n\n    public onChange(callback?: () => void): void {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n\n            return;\n        }\n\n        const transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n\n        this.pipEntryData.expireChangePassword({\n            login: this.config.data.login,\n            old_password: this.config.data.password,\n            new_password: this.config.data.passwordNew,\n            user_id: this.pipEntryData.getUserId()\n        },\n            (data: any) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, false);\n                if (this.transaction.aborted(transactionId)) return;\n\n                const message = String() + 'CHANGE_PWD_SUCCESS_TEXT';\n                this.onShowToast(message, 'message');\n                this.transaction.end();\n                if (callback) callback();\n                this.pipEntry.signout(\n                    () => {\n                        this.$state.go('signin', {\n                            server_url: this.config.data.serverUrl,\n                            login: this.config.data.login\n                        });\n                    }\n                );\n\n            },\n            (error: any) => {\n                this.transaction.end(error);\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                this.pipFormErrors.setFormError(\n                    this.config.form, error, {\n                        'NO_LOGIN': 'login', // Missing account login\n                        'WRONG_LOGIN': 'login', // Account  was not found\n                        'LOGIN_NOT_FOUND': 'login', // Account  was not found\n                        'WRONG_PASSWORD': 'password', // Invalid password\n                        'act_execute': 'form', // Unknown error\n                        'UNKNOWN': 'form',\n                        '-1': 'form' // server not response\n                    }\n                );\n            }\n        );\n    }\n\n}","import { EntryPageConfig } from '../common/EntryPageConfig';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { ChangePasswordViewModel } from './ChangePasswordViewModel';\n\n{\n    interface IChangePasswordPanelBindings {\n        [key: string]: any;\n\n\n    }\n\n    const ChangePasswordPanelBindings: IChangePasswordPanelBindings = {\n\n    }\n\n    class ChangePasswordPanelController {\n        public touchedErrorsWithHint: Function;\n        constructor(\n            private $scope: ng.IScope,\n            private pipFormErrors: pip.errors.IFormErrorsService,\n            private pipRest: pip.rest.IRestService,\n            private pipChangePasswordViewModel: ChangePasswordViewModel\n        ) {\n            \"ngInject\";\n\n            this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n            pipChangePasswordViewModel.initModel($scope);\n\n\n        }\n\n        public $postLink(): void {\n            this.config.form = this.$scope.form;\n            this.config.data.password = null;\n            this.config.data.passwordNew = null;\n        }\n\n        public get config(): any {\n            return this.pipChangePasswordViewModel.config;\n        }\n\n        public get transaction(): any {\n            return this.pipChangePasswordViewModel.transaction;\n        }\n\n        public get showServerError(): any {\n            return this.pipChangePasswordViewModel.showServerError;\n        }\n\n        public get hideObject(): any {\n            return this.pipChangePasswordViewModel.hideObject;\n        }\n\n        public onShowToast(message: string, type: string): void {\n            this.pipChangePasswordViewModel.onShowToast(message, type);\n        }\n        \n        public onServerUrlChanged() {\n            this.config.onServerUrlChanged(this.config.form, this.config.selected.searchURLs);\n        }\n    \n        public onChanged() {\n            this.pipFormErrors.resetFormErrors(this.config.form, false);\n            this.pipFormErrors.resetFieldsErrors(this.config.form, null);\n            this.pipRest.serverUrl = this.config.selected.searchURLs;\n            this.config.data.serverUrl = this.config.selected.searchURLs;\n        }\n\n        public onChangePassword() {\n            this.pipFormErrors.resetFieldsErrors(this.config.form, 'passwordNew');\n        }\n        \n        public onChangePasswordNew() {\n            this.pipFormErrors.resetFieldsErrors(this.config.form, 'password');\n            this.pipFormErrors.resetFieldsErrors(this.config.form, 'passwordConfirm');\n        }\n        \n        public onChangePasswordConfirm() {\n            this.pipFormErrors.resetFieldsErrors(this.config.form, 'passwordNew');\n        }\n    }\n\n    const ChangePasswordPanel: ng.IComponentOptions = {\n        bindings: ChangePasswordPanelBindings,\n        controller: ChangePasswordPanelController,\n        templateUrl: 'change_password/ChangePasswordPanel.html'\n    }\n\n    angular.module(\"pipChangePasswordPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipChangePasswordPanel', ChangePasswordPanel);\n}","import { ChangePasswordModel } from './ChangePasswordModel';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class ChangePasswordViewModel {\n    public model: ChangePasswordModel;\n\n    constructor(\n        pipEntryCommon: any,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        pipEntry: IEntryService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: any,\n        private pipToasts: any\n    ) {\n        \"ngInject\";\n\n        this.model = new ChangePasswordModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state,\n            $injector, pipAuthState, pipFormErrors, pipRest, pipTranslate, pipEntryData, pipEntry, pipToasts);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public onShowToast(message, type) {\n        this.model.onShowToast(message, type);\n    }\n\n    public onChange(callback?: () => void) {\n        this.model.onChange(callback);\n    }\n}\n\nangular.module('pipEntry.ChangePassword')\n    .service('pipChangePasswordViewModel', ChangePasswordViewModel);","/// <reference path=\"../../typings/tsd.d.ts\" />\nimport { IEntryDataService } from '../data/IEntryDataService';\n\n{\n    class LinkEmailUnique {\n        private oldEmail: string;\n\n        constructor(\n            $scope: ng.IScope,\n            $element: ng.IRootElementService,\n            $attrs: ng.IAttributes,\n            ngModel: any,\n            $http: ng.IHttpService,\n            pipEntryData: IEntryDataService\n        ) {\n            \"ngInject\";\n            \n            this.oldEmail = $attrs['pipEmailUnique'];\n\n            $scope.$watch($attrs['ngModel'], _.throttle((newValue) => {\n                const oldHint = ngModel.$validators.emailUnique;\n                if (!newValue || newValue.length == 0 || this.oldEmail == newValue) {\n                    ngModel.$setValidity('emailUnique', oldHint);\n                    return;\n                }\n                \n                if (!newValue) ngModel.$setValidity('emailUnique', true);\n\n                pipEntryData.signupValidate(newValue,\n                    (data) => {\n                        ngModel.$setValidity('emailUnique', true);\n                    },\n                    (err) => {\n                        ngModel.$setValidity('emailUnique', false);\n                    });\n            }, 500));\n        }\n    }\n\n    angular.module('pipEmailUnique', ['ngResource', 'pipEntryData'])\n        .directive('pipEmailUnique',\n            (\n                $http: ng.IHttpService,\n                pipEntryData: any\n            ) => {\n                return {\n                    restrict: 'A',\n                    require: 'ngModel',\n                    link: function (\n                        $scope: ng.IScope,\n                        $element: ng.IRootElementService,\n                        $attrs: ng.IAttributes,\n                        ngModel: any\n                    ) {\n                        new LinkEmailUnique($scope, $element, $attrs, ngModel, $http, pipEntryData);\n                    }\n                };\n            }\n        );\n}","import { IEntryService } from \"./EntryService\";\nimport { IEntryCommonService } from \"./IEntryCommonService\";\nimport { EntryPageConfig, IPastSessions, AuthSessionData } from './EntryPageConfig';\n\nclass EntryCommonService implements IEntryCommonService {\n    private _config: EntryPageConfig = new EntryPageConfig();\n\n    constructor(\n        private $rootScope: ng.IRootScopeService,\n        private $state: ng.ui.IState,\n        private pipAppBar: pip.nav.IAppBarService,\n        private pipNavService: pip.nav.INavService,\n        private pipRest: pip.rest.IRestService,\n        private pipEntry: IEntryService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipIdentity: pip.services.IIdentityService,\n        private pipTranslate: pip.services.ITranslateService,\n        private localStorageService: any\n    ) {\n        \"ngInject\";\n\n    }\n\n    private getLastUsedLogin(serverUrl: string): string {\n        let servers: IPastSessions = <IPastSessions>this.localStorageService.get('servers');\n        if (servers && servers[serverUrl]) {\n            return servers[serverUrl].login;\n        }\n\n        return undefined;\n    }\n\n    private getPastSessions(): IPastSessions {\n        let servers: IPastSessions = this.localStorageService.get('servers') || <IPastSessions>{};\n\n        return servers;\n    }\n\n    private getUsedServerUrls(): string[] {\n        let servers: IPastSessions = this.localStorageService.get('servers') || <IPastSessions>{};\n        let serverUrls: string[] = [];\n        let serverUrl: string;\n\n        for (var prop in servers) {\n            if (servers.hasOwnProperty(prop)) {\n                serverUrl = servers[prop].serverUrl;\n                if (serverUrl) {\n                    serverUrls.push(serverUrl);\n                }\n            }\n        }\n\n        return serverUrls;\n    }\n\n    public configureAppBar(): void {\n        this.pipNavService.sidenav.hide();\n        this.pipNavService.actions.hide();\n        this.pipNavService.appbar.part('menu', false);\n        if (this.pipEntry.showLanguage) {\n            this.pipNavService.appbar.part('actions', 'language');\n        }\n        if (this.pipEntry.appbarTitle) {\n            this.pipNavService.appbar.part('title', 'breadcrumb');\n        } else {\n            this.pipNavService.appbar.part('title', false);\n        }\n        this.pipNavService.breadcrumb.text = this.pipEntry.appbarTitle;\n        this.pipNavService.appbar.addShadow();\n        this.pipNavService.icon.hide();\n        this.pipNavService.search.close();\n        this.pipAppBar.part('icon', this.pipEntry.showIcon);\n        if (this.pipEntry.showIcon) {\n            this.pipNavService.icon.showIcon(this.pipEntry.appbarIcon);\n        }\n\n    };\n\n    public initScope($scope): EntryPageConfig {\n        this._config.appbarTitle = this.pipEntry.appbarTitle;\n        this._config.showIcon = this.pipEntry.showIcon;\n        this._config.showLanguage = this.pipEntry.showLanguage;\n        this._config.adminOnly = this.pipEntry.adminOnly;\n        this._config.fixedServerUrl = this.pipEntry.fixedServerUrl;\n        this._config.enableAvatar = this.pipEntry.enableAvatar;\n        this._config.useEmailAsLogin = this.pipEntry.useEmailAsLogin;\n        this._config.entryHideObject = this.pipEntry.entryHideObject;\n\n        let language: string = this.$state.params.language;\n        if (language) this.pipTranslate.use(language);\n\n        let email: string = null;\n        if (this._config.useEmailAsLogin) {\n            email = this.$state.params.email ? decodeURIComponent(this.$state.params.email) : this.$state.params.login ? decodeURIComponent(this.$state.params.login) : null;\n        } else {\n            email = this.$state.params.email ? decodeURIComponent(this.$state.params.email) : null;\n        }\n  \n        let login: string = null;\n        login = (this.$state.params.login) ? decodeURIComponent(this.$state.params.login) : null;\n\n        if (this.$state['current'].auth) {\n            if (this.pipIdentity.identity && this.pipIdentity.identity.user) {\n                email = this.pipIdentity.identity.user.email || this.pipIdentity.identity.user.login;\n                login = this.pipIdentity.identity.user.login;\n            }\n        }\n\n        this._config.data = {\n            serverUrl: this.$state.params.server_url ? decodeURIComponent(this.$state.params.server_url) : this.pipRest.serverUrl,\n            login: login,\n            email: email,\n            password: '',\n            remember: false,\n            adminOnly: this._config.adminOnly,\n            name: (this.$state.name != 'signup' && this.$state.params.name) ? this.$state.params.name : null,\n            code: this.$state.params.code || null,\n            resetCode: this.$state.params.reset_code || null\n        };\n        if (this._config.data.email && !this._config.data.login) {\n            this._config.data.login = this._config.data.email;\n        }\n        if (!this._config.data.serverUrl) {\n            throw new Error('Server url can not be empty!');\n        }\n\n        this._config.showServerUrl = false;\n        this._config.fixedServerUrl = false;\n        this._config.data.serverUrl = this._config.data.serverUrl || this.pipRest.serverUrl;\n\n        // Fixed server url shall disable changing URL by the user\n        if (this.pipEntry.fixedServerUrl) {\n            this._config.data.serverUrl = this.pipRest.serverUrl;\n            this._config.fixedServerUrl = true;\n        }\n\n        if (this.$state.name != 'signup') {\n            this._config.data.login = this._config.data.login || this.getLastUsedLogin(this._config.data.serverUrl);\n        }\n        this._config.serverUrls = this.getUsedServerUrls();\n        this._config.servers = this.getPastSessions();\n\n        this._config.selected = {};\n        this._config.selected.searchURLs = this._config.data.serverUrl;\n\n        // Set login from history\n        if (!this.$state['current'].auth) {\n            if (this._config.data.serverUrl && !this._config.data.login && this.$state.name != 'signup') {\n                let server: any = this._config.servers[this._config.data.serverUrl];\n                this._config.data.login = (server || {}).login;\n            }\n        }\n\n        this._config.filterItem = (item) => { return this.filterItem(item) };\n        this._config.getMatches = (query) => { return this.getMatches(query) };\n        this._config.onServerUrlChanged = (form?: any, url?: string) => { this.onServerUrlChanged(form, url) };\n        this._config.isEmpty = _.isEmpty;\n\n        return _.cloneDeep(this._config);\n    }\n\n    private filterItem(item): any {\n        let result = (this._config.selected.searchURLs && item\n            && item.toLowerCase().indexOf(this._config.selected.searchURLs.toLowerCase()) >= 0);\n        return result;\n    }\n\n    private getMatches(query: string): any {\n        if (!query)\n            return this._config.showServerUrl;\n\n        this._config.data.serverUrl = query;\n        this._config.selected.searchURLs = query;\n        return _.filter(this._config.serverUrls, this._config.filterItem);\n    }\n\n    private onServerUrlChanged(form?: any, url?: string) {\n        form = form ? form : this._config.form;\n        url = url ? url : this._config.selected.searchURLs;\n\n        if (!url) return;\n        let server = this._config.servers[url];\n\n        if (server && this.$state.name != 'signup') {\n            this._config.data.login = server.login;\n            this.pipRest.serverUrl = url;\n            this._config.data.serverUrl = url;\n        }\n\n        if (form) {\n            this.pipFormErrors.resetFormErrors(form, false);\n            this.pipFormErrors.resetFieldsErrors(form, null);\n        }\n    }\n}\n\nangular.module('pipEntry.CommonService', [])\n    .service('pipEntryCommon', EntryCommonService);\n","export class EntryHideObject {\n    public remember?: boolean = false;\n    public title?: boolean;\n    public server?: boolean;\n    public forgotPassword?: boolean;\n    public signup?: boolean;\n    public hint?: boolean;\n    public progress?: boolean;\n    public subTitle?: boolean;\n    public successTitle?: boolean;\n    public subTitle1?: boolean;\n    public subTitle2?: boolean;\n    public agreement?: boolean;\n    public passwordConfirm?: boolean;\n    public signin?: boolean;\n    public resetSubTitle?: boolean;\n    public changePwdTitle?: boolean;\n    public changePwdSubTitle?: boolean;\n}","import { IEntryService } from \"../common/EntryService\";\nimport { AuthSessionData } from '../common/EntryPageConfig';\n\nfunction initEntry(pipEntry: IEntryService, $rootScope: ng.IRootScopeService, pipSession: pip.services.ISessionService,\n    pipDataCache: pip.rest.IDataCacheService, pipTimer: pip.services.ITimerService): void {\n\n    // Reload session to avoid signin\n    $rootScope.$on(pip.services.SessionOpenedEvent, (event: ng.IAngularEvent, data: AuthSessionData) => {\n        pipDataCache.clear();\n        pipTimer.start();\n    });\n\n    $rootScope.$on(pip.services.SessionClosedEvent, (event: ng.IAngularEvent, data: AuthSessionData) => {\n        pipDataCache.clear();\n    });\n\n    // Reload session to avoid signin\n    // todo may be start optionaly\n    pipEntry.reopenSession();\n}\n\nangular.module('pipEntry.Service')\n    .run(initEntry);","import { EntryPageConfig } from './EntryPageConfig';\nimport { IEntryCommonService } from \"./IEntryCommonService\";\nimport { EntryHideObject } from './EntryHideObject';\n\nexport class EntryModel {\n    public config: EntryPageConfig;\n    public hideObject: EntryHideObject;\n    public showServerError: boolean = true;\n    public transaction: pip.services.Transaction;\n\n    constructor(\n        public pipEntryCommon: IEntryCommonService,\n    ) { \n        \"ngInject\";\n        \n    }\n\n    protected initModel($scope) {\n        this.config = this.pipEntryCommon.initScope($scope);\n        this.config.form = this.config.form || $scope.form;\n        this.hideObject = this.config.entryHideObject; \n    }\n}","import { EntryConfig } from './EntryService';\n\nexport class EntryPageConfig extends EntryConfig {\n    data: EntryDataConfig;\n    showServerUrl: boolean = false;\n    serverUrls: string[];\n    servers: IPastSessions;\n    selected: any;\n    filterItem: Function;\n    getMatches: Function;\n    onServerUrlChanged: Function;\n    isEmpty: Function;\n    form: any;\n}\n\nexport class EntryDataConfig {\n    login: string;\n    serverUrl: string;\n    email: string;\n    password: string;\n    passwordNew?: string;\n    remember: boolean;\n    adminOnly: boolean;\n    name: string;\n    code: string;\n    resetCode: string;\n}\n\n// export angular events\n// export const AuthSessionOpenedEvent = 'pipSessionOpened';\n// export const AuthSessionClosedEvent = 'pipSessionClosed';\n// export const AutoPullChangesEvent = 'pipAutoPullChanges';\n\nexport class SigninParams {\n    public email?: string;\n    public login: string;\n    public serverUrl: string;\n    public password?: string;\n    public remember?: boolean;\n    public adminOnly?: boolean;\n}\n\nexport class SignupParams {\n    public login: string;\n    public email?: string;\n    public name?: string;\n    public serverUrl: string;\n    public password?: string;\n    public remember?: boolean;\n    public adminOnly?: boolean;\n    public language?: string;\n    public theme?: string; \n    public time_zone?: string;\n}\n\nexport class AuthSessionData {\n    serverUrl: string = undefined;\n    sessionId: string = undefined;\n    userId: string = undefined;\n}\n\n\nexport class PastSession { \n    public login: string;\n    public serverUrl: string;\n}\n\n\nexport interface IPastSessions {\n    [key: string]: PastSession\n}\n","import { IPastSessions, AuthSessionData } from './EntryPageConfig';\nimport { SessionData } from '../data/SessionData';\nimport { EmailSettings } from '../data/EmailSettings';\nimport { EntryHideObject } from './EntryHideObject';\n\nexport interface IEntryService {\n    appbarTitle: string;\n    appbarIcon: string;\n    showIcon: boolean;\n    showLanguage: boolean;\n    adminOnly: boolean;\n    fixedServerUrl: boolean;\n    enableAvatar: boolean;\n    useEmailAsLogin: boolean;\n    isPostSignup: boolean;\n    passwordExpire: boolean;\n    entryHideObject: EntryHideObject;\n\n    openSession(data: SessionData, remember?: boolean): void;\n    getUserId(data: SessionData): string;\n    // restoreSession(callback: Function): void;\n    reopenSession(): void;\n    closeSession(): void;\n    signout(successCallback?: () => void): void\n}\n\nexport interface IEntryProvider {\n    appbarTitle: string;\n    appbarIcon: string;\n    showIcon: boolean;\n    showLanguage: boolean;\n    adminOnly: boolean;\n    fixedServerUrl: boolean;\n    enableAvatar: boolean;\n    useEmailAsLogin: boolean;\n    isPostSignup: boolean;\n    passwordExpire: boolean;\n    entryHideObject: EntryHideObject;\n}\n\nexport class EntryConfig {\n    public appbarTitle: string;\n    public appbarIcon: string;\n    public showIcon: boolean;\n    public showLanguage: boolean;\n    public adminOnly: boolean;\n    public fixedServerUrl: boolean;\n    public enableAvatar: boolean;\n    public useEmailAsLogin: boolean;\n    public isPostSignup: boolean;\n    public entryHideObject: EntryHideObject;\n    // control expare password by change_pwd_time field\n    public passwordExpire: boolean;\n}\n\nclass EntryService implements IEntryService {\n    private sessionState: string;\n\n    constructor(\n        private config: EntryConfig,\n        private pipRest: pip.rest.IRestService,\n        private localStorageService: any,\n\t\tprivate $cookies: any,\n        private $cookieStore: any,\n        private pipSession: pip.services.ISessionService,\n        private pipIdentity: pip.services.IIdentityService,\n        private pipTimer: pip.services.ITimerService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipTheme: pip.themes.IThemeService,\n        private $timeout: ng.ITimeoutService,\n        private pipAuthState: pip.rest.IAuthStateService\n    ) {\n        \"ngInject\";\n\n        this.pipSession.addOpenListener((callback: Function) => {\n            this.restoreSession(callback);\n        });\n\n    }\n\n    private restore(data: AuthSessionData): AuthSessionData {\n        let result: AuthSessionData = new AuthSessionData();\n        for (let property in data) {\n            if (data.hasOwnProperty(property)) {\n                if (!_.isObject(data[property])) {\n                    result[property] = /* this.$cookieStore.get(property) */ this.$cookies.get(property) || this.localStorageService.get(property);\n                } else {\n                    result[property] = data[property];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private storeToLocal(data: any): void {\n        for (let property in data) {\n            if (data.hasOwnProperty(property) && !_.isObject(data[property])) {\n                this.localStorageService.set(property, data[property]);\n            }\n        }\n    }\n\n    private removeLocal(data: any): void {\n        for (let property in data) {\n            if (data.hasOwnProperty(property) && !_.isObject(data[property])) {\n                this.localStorageService.remove(property);\n            }\n        }\n    }\n\n    private storeToCookie(data: any): void {\n        for (let property in data) {\n            if (data.hasOwnProperty(property) && !_.isObject(data[property])) {\n                // this.$cookieStore.put(property, data[property]);\n\t\t\t\tthis.$cookies.put(property, data[property], {path: '/'});\n            }\n        }\n    }\n\n    private removeCookie(data: any): void {\n        for (let property in data) {\n            if (data.hasOwnProperty(property) && !_.isObject(data[property])) {\n                // this.$cookieStore.remove(property);\n\t\t\t\tthis.$cookies.remove(property);\n            }\n        }\n    }\n\n    private storeKnownServer(value: string): void {\n        if (!value) return;\n        \n        // this.$cookieStore.put(value, value);\n\t\tthis.$cookies.put(value, value, {path: '/'});\n        this.localStorageService.set(value, value);\n    }\n\n    public get appbarIcon(): string {\n        return this.config.appbarIcon;\n    }\n\n    public get appbarTitle(): string {\n        return this.config.appbarTitle;\n    }\n\n    public get showIcon(): boolean {\n        return this.config.showIcon;\n    }\n\n    public get showLanguage(): boolean {\n        return this.config.showLanguage;\n    }\n\n    public get adminOnly(): boolean {\n        return this.config.adminOnly;\n    }\n\n    public get fixedServerUrl(): boolean {\n        return this.config.fixedServerUrl;\n    }\n\n    public get passwordExpire(): boolean {\n        return this.config.passwordExpire;\n    }\n\n    public get entryHideObject(): EntryHideObject {\n        return this.config.entryHideObject;\n    }\n\n    public get enableAvatar(): boolean {\n        return this.config.enableAvatar;\n    }\n\n    public get useEmailAsLogin(): boolean {\n        return this.config.useEmailAsLogin;\n    }\n\n    public get isPostSignup(): boolean {\n        return this.config.isPostSignup;\n    }\n\n    public openSession(data: SessionData, remember?: boolean): void {\n        let session: AuthSessionData = new AuthSessionData();\n        session.sessionId = data ? data.id : null;\n        session.userId = this.getUserId(data);\n        session.serverUrl = this.pipRest.serverUrl;\n\n        if (!session.sessionId) {\n            throw new Error('Error: session Id not found');\n        }\n\n        if (!session.userId) {\n            throw new Error('Error: user Id not found');\n        }\n\n        this.sessionState = 'open';\n\n        // Set default headers for subsequent HTTP requests\n        this.pipRest.setHeaders({\n            'x-session-id': session.sessionId\n        });\n\n        // Save ids into local storage\n        if (remember) {\n            let servers: IPastSessions = this.localStorageService.get('servers') || <IPastSessions>{};\n            servers[session.serverUrl] = {\n                serverUrl: session.serverUrl,\n                login: data.user.login\n            };\n            this.localStorageService.set('servers', servers);\n            this.storeToLocal(session);\n        }\n\n        this.storeKnownServer(session.serverUrl)\n\n        // Remove from cookie store\n        this.storeToCookie(session);\n        // Send broadcast\n \n        this.pipIdentity.identity = data;\n        this.pipSession.open(session);\n        this.pipTranslate.use(data.user.language);\n\n        if (data.user.theme && data.user.theme != this.pipTheme.theme) {\n            this.pipTheme.use(data.user.theme);\n        }\n    }\n\n    public getUserId(data: SessionData): string {\n        if (!data) {\n            return null;\n        }\n        let id: string;\n        id = data.user_id ? data.user_id : data.user ? data.user.id : null;\n\n        return id;\n    }\n\n    private checkEmailVerification(data: SessionData): boolean {\n        return (data.user && data.user.settings &&\n            data.user.settings['verified_email'] && data.user.settings['verified_email'] == \"true\");\n    }\n\n    private restoreSessionComplete(data: SessionData, callback: Function): void {\n        if (angular.isFunction(callback)) {\n            callback()\n        }\n        this.pipIdentity.identity = data;\n        this.pipTranslate.use(data.user.language);        \n    }\n\n    private restoreSession(callback: Function): void {\n        if (this.sessionState === 'open') {\n            if (angular.isFunction(callback)) {\n                callback()\n            }\n\n            return;\n        }\n\n        let session: AuthSessionData = new AuthSessionData();\n        session = this.restore(session);\n\n        if (!session || !session.sessionId) {\n            this.signout(() => {\n                this.pipAuthState.goToUnauthorized({});\n            });\n\n            return;\n        }\n\n        this.pipRest.getResource('restoreSessions').call(\n            {\n                session_id: session.sessionId\n            },\n            (data: SessionData) => {\n                if (!data || !data.id) {\n                    this.signout(() => {\n                        this.pipAuthState.goToUnauthorized({});\n                    });\n\n                    return;\n                }\n\n                session.userId = this.getUserId(data);\n                session.serverUrl = this.pipRest.serverUrl;\n                //  cookie store\n                this.storeToCookie(session);\n\n                if (this.checkEmailVerification(data)) {\n                    this.restoreSessionComplete(data, callback);\n                } else {\n                    this.pipRest.getResource('email_settings').get(\n                        {\n                            user_id: data.user.id\n                        },\n                        (setting: EmailSettings) => {\n                            if (setting && setting.verified && setting.email == data.user.login) {\n                                this.restoreSessionComplete(data, callback);\n                            } else {\n                                this.restoreSessionComplete(data, () => {\n                                    if (callback) callback();\n                                    this.pipAuthState.go('verify_email', { email: data.user.login || data.user['email'], serverUrl: this.pipRest.serverUrl });\n                                });\n                            }\n                        }, \n                        (error: any) => {\n\n                        });\n                }\n            },\n            (error: any) => {\n                if (angular.isFunction(callback)) {\n                    callback(error);\n                }\n\n                this.signout(() => {\n                    this.pipAuthState.goToUnauthorized({});\n                });\n            });\n    }\n\n    public reopenSession(): void {\n        let session: AuthSessionData = new AuthSessionData();\n        session = this.restore(session);\n\n        if (!session || !session.sessionId) {\n            this.signout(() => {\n                this.pipAuthState.goToUnauthorized({});\n            });\n\n            return;\n        }\n\n        this.sessionState = 'reopen';\n        // Set default headers for subsequent HTTP requests\n        this.pipRest.setHeaders({\n            'x-session-id': session.sessionId\n        });\n\n        if ((!this.pipRest.lockServerUrl || !this.pipRest.serverUrl) && session.serverUrl) {\n            this.pipRest.serverUrl = session.serverUrl;\n        }\n\n        this.pipSession.open(session);\n    }\n\n    public closeSession(): void {\n        let session: AuthSessionData = new AuthSessionData();\n        session.sessionId = null;\n        session.userId = null;\n        session.serverUrl = null;\n\n        this.pipRest.setHeaders({\n            'x-session-id': undefined\n        });\n        this.pipIdentity.identity = null;\n        // Remove ids into local storage\n        this.removeLocal(session);\n        // Remove from cookie store\n        this.removeCookie(session);\n        // Stop timer\n        this.pipTimer.stop();\n        // Send broadcast\n        this.pipSession.close();\n    }\n\n    public signout(successCallback?: () => void): void {\n        if (this.pipSession.isOpened()) {\n            this.pipRest.getResource('signout').call({}, successCallback, successCallback);\n        }\n\n        this.closeSession();\n    }\n}\n\n\nclass EntryProvider implements IEntryProvider {\n    private _service: IEntryService;\n    private config: EntryConfig;\n\n    constructor() {\n        this.config = new EntryConfig();\n        this.config.appbarTitle = '';\n        this.config.appbarIcon = '';\n        this.config.adminOnly = false;\n        this.config.showIcon = false;\n        this.config.showLanguage = true;\n        this.config.adminOnly = false;\n        this.config.fixedServerUrl = null;\n        this.config.passwordExpire = false;\n        this.config.enableAvatar = false;\n        this.config.useEmailAsLogin = false;\n        this.config.isPostSignup = true;\n        this.config.entryHideObject = new EntryHideObject();\n    }\n\n    public set appbarIcon(newAppbarIcon: string) {\n        this.config.appbarIcon = newAppbarIcon;\n    }\n\n    public set appbarTitle(newAppbarTitle: string) {\n        this.config.appbarTitle = newAppbarTitle;\n    }\n\n    public set showIcon(newShowIcon: boolean) {\n        this.config.showIcon = newShowIcon;\n    }\n\n    public set showLanguage(newShowLanguage: boolean) {\n        this.config.showLanguage = newShowLanguage;\n    }\n\n    public set adminOnly(newAdminOnly: boolean) {\n        this.config.adminOnly = newAdminOnly;\n    }\n\n    public set fixedServerUrl(newFixedServerUrl: boolean) {\n        this.config.fixedServerUrl = newFixedServerUrl;\n    }\n\n    public set passwordExpire(value: boolean) {\n        this.config.passwordExpire = value;\n    }\n\n    public set entryHideObject(entryHideObject: EntryHideObject) {\n        this.config.entryHideObject = entryHideObject;\n    }\n\n    public set enableAvatar(value: boolean) {\n        this.config.enableAvatar = value;\n    }\n\n    public set useEmailAsLogin(value: boolean) {\n        this.config.useEmailAsLogin = value;\n    }\n\n    public set isPostSignup(value: boolean) {\n        this.config.isPostSignup = value;\n    }\n\n    public $get(\n        pipRest: pip.rest.IRestService,\n        localStorageService: any,\n\t\t$cookies: any,\n        $cookieStore: any,\n        pipSession: pip.services.ISessionService,\n        pipIdentity: pip.services.IIdentityService,\n        pipTimer: pip.services.ITimerService,\n        pipTranslate: pip.services.ITranslateService,\n        pipTheme: pip.themes.IThemeService,\n        $timeout: ng.ITimeoutService,\n        pipAuthState: pip.rest.IAuthStateService\n    ) {\n        \"ngInject\";\n        if (_.isNull(this._service) || _.isUndefined(this._service)) {\n            this._service = new EntryService(this.config, pipRest, localStorageService, $cookies, $cookieStore,\n                pipSession, pipIdentity, pipTimer, pipTranslate, pipTheme, $timeout, pipAuthState);\n        }\n\n        return this._service;\n    }\n}\n\nangular.module('pipEntry.Service', [])\n    .provider('pipEntry', EntryProvider);","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(() => {\n    'use strict';\n\n    angular.module('pipEntry.Strings', [])\n        .config(function (pipTranslateProvider) {\n\n            // Set translation strings for the module\n            pipTranslateProvider.translations('en', {\n                // Common labels\n                'FULLNAME': 'First and last name',\n                'EMAIL': 'Email',\n                'LOGIN': 'Login',\n                'PASSWORD': 'Password',\n                'LANGUAGE': 'Language',\n                'GENDER': 'Gender',\n                'BIRTHDAY': 'Birthday',\n                'LOCATION': 'Location',\n                'VERIFY': 'Verify',\n                'CONTINUE': 'Continue',\n\n\n                // Common hints\n                'HINT_FULLNAME': \"Use your real name, so others know who you are\",\n                'HINT_PASSWORD': 'Minimum 6 characters',\n                'SIGNIN_HINT_PASSWORD': 'Please, type password',\n                'HINT_ABOUT': 'Few words about yourself',\n                'VERIFY_EMAIL': 'Please, verify your email address. ',\n                'HINT_EMAIL': 'Enter your email address, please',\n                'VERIFY_LOGIN': 'Please, verify your login address. ',\n                'HINT_LOGIN': 'Enter your login, please',\n\n                // Sign In page\n                'SIGNIN_TITLE': 'Sign in',\n                'SIGNIN_NOT_MEMBER': 'Not a member?',\n                'SIGNIN_REMEMBER': 'Remember',\n                'SIGNIN_FORGOT_PASSWORD': 'Forgot password?',\n                'SIGNIN_SIGNUP_HERE': ' Sign up here',\n\n                // Sign Up page\n                'SIGNUP_TITLE': 'Sign up',\n                'SIGNUP_NOT_MEMBER': 'Not a member? Sign up now',\n                'SIGNUP_TEXT_11': 'By clicking Sign up, you agree to the',\n                'SIGNUP_PRIVACY': 'privacy statement',\n                'SIGNUP_TEXT_12': 'and',\n                'SIGNUP_SERVICES': 'services agreement',\n                'SIGNUP_TEXT_2': 'Do you have an account?',\n                'SIGNUP_SIGNIN_HERE': ' Sign in here',\n                'SIGNUP_EMAIL_REGISTERED': 'This email is already registered',\n                'SIGNUP_LOGIN_REGISTERED': 'This login is already registered',\n                'SIGNUP_FULLNAME_WRONG': 'xxxx',\n                'SIGNUP_EMAIL_WRONG': 'xxxx',\n                'SIGNUP_LOGIN_WRONG': 'xxxx',\n\n                // Sign Up Details page\n                'POST_SIGNUP_TITLE': 'Welcome to Pip.Life',\n                'POST_SIGNUP_TEXT_1': 'Your account was successfully created.',\n                'POST_SIGNUP_TEXT_2': 'Tell us some more about yourself.',\n\n                // Recover Password page\n                'RECOVER_PWD_TITLE': 'Forgot password?',\n                'RECOVER_PWD_TEXT_1_LOGIN': \"Enter the login you used when you joined and we'll send you instructions to reset your password.\",\n                'RECOVER_PWD_TEXT_1_EMAIL': \"Enter the e-mail you used when you joined and we'll send you instructions to reset your password.\",\n                'RECOVER_PWD_TEXT_2': 'For security reasons, we do NOT store your password. So rest assured that we will never send your password via email.',\n                'RECOVER_PWD_RECOVER': 'Recover password',\n\n                // Reset Password page\n                'RESET_PWD_PASSWORD': 'Reset password',\n                'RESET_PWD_TEXT_LOGIN': 'Enter the login together with the reset code you received in email from. Remember the code is only active for 24 hours.',\n                'RESET_PWD_TEXT_EMAIL': 'Enter the e-mail together with the reset code you received in email from. Remember the code is only active for 24 hours.',\n                'RESET_PWD_SUCCESS_TEXT': 'Your password was successfully changed',\n\n                // Verify Email page\n                'VERIFY_EMAIL_WAIT': 'Email verification. Please, wait.',\n                'VERIFY_EMAIL_TITLE': 'Email verification',\n                'VERIFY_EMAIL_TEXT_1': 'Confirm your email address using verification code',\n                'VERIFY_EMAIL_TEXT_21': \"If you haven't received the code, press \",\n                'VERIFY_EMAIL_RESEND': 'resend',\n                'VERIFY_EMAIL_TEXT_22': 'to send it again.',\n                'VERIFY_EMAIL_SUCCESS_TEXT': 'Your email address was successfully verified. Thank you!',\n\n                'PASSWORD_MATCH': 'Passwords don\\'t match',\n                'PASSWORD_CONFIRM': 'Confirm the password',\n                'PASSWORD_SET': 'Set a password',\n\n                // Common entry resources\n                'ENTRY_CHANGE_SERVER': 'Change server',\n                'ENTRY_SERVER_URL': 'Server URL',\n                'ENTRY_RESET_CODE': 'Reset code',\n                'ENTRY_VERIFICATION_CODE': 'Verification code',\n                'ENTRY_NEW_PASSWORD': 'New password',\n                'ENTRY_SET_PASSWORD': 'Set Password',\n                'ENTRY_RESET_PASSWORD': 'Set',\n                'ENTRY_FREE': 'Free',\n                'ENTRY_REPEAT': 'Repeat',\n\n                // password changed resource\n                'CHANGE_PWD_PASSWORD': 'Change password',\n                'EXPIRE_CHANGE_PWD_PASSWORD': 'Change expire password',\n                'CHANGE_PWD_TEXT': 'Enter a new password to login.',\n                'EXPIRE_CHANGE_PWD_TEXT': 'Your password has expired. Enter a new password to login.',\n                'ENTRY_CHANGE_PASSWORD': 'Change',\n                'ENTRY_EXPIRE_CHANGE_PASSWORD': 'Change',\n                'OLD_PASSWORD': 'Current password',\n                'NEW_PASSWORD_SET': 'New password',\n                'NEW_PASSWORD_CONFIRM': 'Repeat password',\n                'CHANGE_PWD_SUCCESS_TEXT': 'Password changed successfuly',\n                'EXPIRE_CHANGE_PWD_SUCCESS_TEXT': 'Password changed successfuly',\n\n\n                // Validation errors\n                'ERROR_EMAIL_INVALID': 'Enter a valid email',\n                'ERROR_LOGIN_INVALID': 'Enter a valid login',\n                'ERROR_PASSWORD_INVALID': 'Enter a valid password',\n                'MINLENGTH_PASSWORD': 'Minimum password length 6 characters',\n                'ERROR_FULLNAME_INVALID': 'Enter full name',\n                'ERROR_CODE_INVALID': 'Enter a code from mail',\n                'ERROR_CODE_WRONG': 'Wrong recovery code',\n                'ERROR_SERVER_INVALID': 'Enter server URL',\n\n                //Languages\n                'LANGUAGE_RUSSIAN': 'Russian',\n                'LANGUAGE_ENGLISH': 'English',\n\n                // errors handling strings\n\n                'ERROR_ACT_EXECUTE': 'Bad Request. User was not found.',\n                'ERROR_WRONG_LOGIN': 'Account was not found',\n                'ERROR_LOGIN_NOT_FOUND': 'Account was not found',\n                'ERROR_NO_LOGIN': 'Missing account login',\n                'ERROR_WRONG_PASSWORD': 'Invalid password',\n                'ERROR_WRONG_CODE': 'Invalid password recovery code',\n                'ERROR_INVALID_CODE': 'Invalid email verification code',\n                'ERROR_NO_EMAIL': 'Missing email',\n                'ERROR_NO_NAME': 'Missing account name',\n                'ERROR_ALREADY_EXIST': 'User account already exist',\n                'ERROR_LOGIN_ALREADY_USED': 'User account already exist',\n                'ERROR_ALREADY_EXIST_EMAIL': 'User account already exist',\n                'ERROR_WRONG_LOGIN_EMAIL': 'Account was not found',\n                'ERROR_NO_LOGIN_EMAIL': 'Missing account login',\n                'ERROR_SERVER': 'Server is not responding',\n                'ERROR_ACCOUNT_LOCKED': 'Number of attempts exceeded. You account was locked.',\n                'ERROR_UNKNOWN': 'Unknown error',\n                'PASSWORD_IDENTICAL': 'Old and new passwords are identical'\n            });\n\n            pipTranslateProvider.translations('ru', {\n                // Common labels\n                'FULLNAME': 'Имя и фамилия',\n                'EMAIL': 'Адрес эл.почты',\n                'LOGIN': 'Логин',\n                'PASSWORD': 'Пароль',\n                'LANGUAGE': 'Язык',\n                'GENDER': 'Пол',\n                'BIRTHDAY': 'Дата рождения',\n                'LOCATION': 'Местонахождение',\n                'VERIFY': 'Подтвердить',\n                'CONTINUE': 'Продолжить',\n\n                // Common hints\n                'HINT_FULLNAME': \"Пожалуйста, введите свое полное имя - так, как вы хотите чтобы вас видели другие пользователи.\",\n                'HINT_PASSWORD': 'Минимум 6 символов',\n                'SIGNIN_HINT_PASSWORD': 'Введите пароль',\n                'HINT_ABOUT': 'Несколько слов о себе',\n                'VERIFY_EMAIL': 'Подтвердите адрес своей эл.почты',\n                'HINT_EMAIL': 'Введите адрес своей эл.почты',\n                'VERIFY_LOGIN': 'Подтвердите свой логин',\n                'HINT_LOGIN': 'Введите свой логин',\n                // Sign In page\n                'SIGNIN_TITLE': 'Вход в систему',\n                'SIGNIN_NOT_MEMBER': 'Еще не зарегистрировались?',\n                'SIGNIN_REMEMBER': 'Запомнить',\n                'SIGNIN_FORGOT_PASSWORD': 'Забыли пароль?',\n                'SIGNIN_SIGNUP_HERE': ' Зарегистрироваться здесь',\n\n                // Sign Up page\n                'SIGNUP_TITLE': 'Регистрация',\n                'SIGNUP_NOT_MEMBER': 'Новенький? Зарегистрируйтесь сейчас',\n                'SIGNUP_TEXT_11': 'Нажимая кнопку регистрация, я соглашаюсь с',\n                'SIGNUP_SERVICES': 'договором об услугах',\n                'SIGNUP_TEXT_12': 'и',\n                'SIGNUP_PRIVACY': 'соглашением о личных данных',\n                'SIGNUP_TEXT_2': 'Уже зарегистрировались?',\n                'SIGNUP_SIGNIN_HERE': ' Вход здесь',\n                'SIGNUP_EMAIL_REGISTERED': 'Введенный адрес эл.почты уже занят',\n                'SIGNUP_LOGIN_REGISTERED': 'Введенный логин уже занят',\n\n                // Sign Up Details page\n                'POST_SIGNUP_TITLE': 'Добро пожаловать в Pip.Life',\n                'POST_SIGNUP_TEXT_1': 'Ваша учетная запись создана.',\n                'POST_SIGNUP_TEXT_2': 'Несклько слов о о себе',\n\n                // Recover Password page\n                'RECOVER_PWD_TITLE': 'Забыли пароль?',\n                'RECOVER_PWD_TEXT_1_LOGIN': 'Введите логин, который вы использовали при регистрации и мы вышлем вам инструкции как изменить пароль.',\n                'RECOVER_PWD_TEXT_1_EMAIL': 'Введите эл. почту, которую вы использовали при регистрации и мы вышлем вам инструкции как изменить пароль.',\n                'RECOVER_PWD_TEXT_2': 'По соображениям безопасности мы НЕ храним пароли. Таким образом, мы никогда не пошлем ваш пароль по электронной почте.',\n                'RECOVER_PWD_RECOVER': 'Восстановить пароль',\n\n                // Reset Password page\n                'RESET_PWD_PASSWORD': 'Изменить пароль',\n                'RESET_PWD_TEXT_LOGIN': 'Введите логин вместе с кодом, который вы получили в почтовом сообщении. Помните, что код действителен только 24 часа.',\n                'RESET_PWD_TEXT_EMAIL': 'Введите эл. почту вместе с кодом, который вы получили в почтовом сообщении. Помните, что код действителен только 24 часа.',\n                'RESET_PWD_SUCCESS_TEXT': 'Ваш пароль успешно изменён',\n\n                // Verify Email page\n                'VERIFY_EMAIL_WAIT': 'Верификация эл. почты. Подождите немного.',\n                'VERIFY_EMAIL_TITLE': 'Подтверждение адреса эл.почты',\n                'VERIFY_EMAIL_TEXT_1': 'Введите код, который вы получили по эл.почте',\n                'VERIFY_EMAIL_TEXT_21': \"Если вы не получили почтовое сообщение с кодом, нажмите \",\n                'VERIFY_EMAIL_RESEND': 'отправить снова',\n                'VERIFY_EMAIL_TEXT_22': '.',\n                'VERIFY_EMAIL_SUCCESS_TEXT': 'Адрес вашей электронной почты успешно подтвержден. Спасибо!',\n\n                'PASSWORD_MATCH': 'Пароли не совпадают',\n                'PASSWORD_CONFIRM': 'Подтвердите пароль',\n                'PASSWORD_SET': 'Задайте пароль',\n\n                // Common entry resources\n                'ENTRY_CHANGE_SERVER': 'Изменить сервер',\n                'ENTRY_SERVER_URL': 'URL сервера',\n                'ENTRY_RESET_CODE': 'Код сброса пароля',\n                'ENTRY_VERIFICATION_CODE': 'Код проверки электронной почты',\n                'ENTRY_NEW_PASSWORD': 'Новый пароль',\n                'ENTRY_SET_PASSWORD': 'Изменить пароль',\n                'ENTRY_RESET_PASSWORD': 'Изменить',\n                'ENTRY_FREE': 'бесплатно',\n                'ENTRY_REPEAT': 'Повторить',\n\n                // password changed resource\n                'CHANGE_PWD_PASSWORD': 'Изменение пароля',\n                'EXPIRE_CHANGE_PWD_PASSWORD': 'Изменение пароля',\n                'CHANGE_PWD_TEXT': 'Для входа введите новый пароль.',\n                'EXPIRE_CHANGE_PWD_TEXT': 'Время действия Вашего пароля истекло. Для входа введите новый пароль.',\n                'ENTRY_CHANGE_PASSWORD': 'Изменить',\n                'ENTRY_EXPIRE_CHANGE_PASSWORD': 'Изменить',\n                'OLD_PASSWORD': 'Текущий пароль',\n                'NEW_PASSWORD_SET': 'Новый пароль',\n                'NEW_PASSWORD_CONFIRM': 'Повторите пароль',\n                'CHANGE_PWD_SUCCESS_TEXT': 'Пароль был успешно изменен',\n                'EXPIRE_CHANGE_PWD_SUCCESS_TEXT': 'Пароль был успешно изменен',\n\n                // Validation errors\n                'ERROR_EMAIL_INVALID': 'Введите адрес электронной почты',\n                'ERROR_LOGIN_INVALID': 'Введите логин',\n                'ERROR_PASSWORD_INVALID': 'Введите пароль',\n                'MINLENGTH_PASSWORD': 'Минимальная длинна пароля 6 символов',\n                'ERROR_FULLNAME_INVALID': 'Введите полное имя',\n                'ERROR_CODE_INVALID': 'Введите код',\n                'ERROR_CODE_WRONG': 'Неправильный код',\n                'ERROR_SERVER_INVALID': 'Введите URL сервера',\n\n                //Languages\n                'LANGUAGE_RUSSIAN': 'Русский',\n                'LANGUAGE_ENGLISH': 'Английский',\n\n                // errors handling strings\n\n                'ERROR_ACT_EXECUTE': 'Неверный запрос. Пользователь не найден.',\n                'ERROR_WRONG_LOGIN': 'Учетная запись пользователя не существует',\n                'ERROR_LOGIN_NOT_FOUND': 'Учетная запись пользователя не существует',\n                'ERROR_NO_LOGIN': 'Не задан логин',\n                'ERROR_WRONG_PASSWORD': 'Не верный пароль',\n                'ERROR_WRONG_CODE': 'Не верный код восстановления пароля',\n                'ERROR_INVALID_CODE': 'Не верный код верификации электронной почты',\n                'ERROR_NO_EMAIL': 'Не задан адресс электронной почты',\n                'ERROR_NO_NAME': 'Не задано имя пользователя',\n                'ERROR_ALREADY_EXIST': 'Логин уже зарегистрирован',\n                'ERROR_LOGIN_ALREADY_USED': 'Логин уже зарегистрирован',\n                'ERROR_ALREADY_EXIST_EMAIL': 'Логин уже зарегистрирован',\n                'ERROR_WRONG_LOGIN_EMAIL': 'Учетная запись пользователя не существует',\n                'ERROR_NO_LOGIN_EMAIL': 'Не задан логин',\n                'ERROR_SERVER': 'Сервер не отвечает. Проверьте URL сервера.',\n                'ERROR_ACCOUNT_LOCKED': 'Количесво попыток превышено. Ваша учетная запись заблокирована.',\n                'ERROR_UNKNOWN': 'Неизвестная ошибка',\n                'PASSWORD_IDENTICAL': 'Старый и новый пароль совпадают'\n            });\n\n        });\n\n})();","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nfunction compareOldPassword($parse: ng.IParseService): ng.IDirective {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ngModelCtrl) {\n            ngModelCtrl['$validators'].ERROR_compareTo = function (modelValue, viewValue) {\n                if (ngModelCtrl['$isEmpty'](modelValue)) {\n                    return true;\n                }\n\n                let otherModelValue;\n                let otherModelValueGetter = $parse(attrs.compareTo);\n\n                if (!modelValue || !!otherModelValue) return true;\n\n                if (otherModelValueGetter) {\n                    otherModelValue = otherModelValueGetter(scope);\n\n                    return modelValue != otherModelValue;\n                } else {\n                    return true;\n                }\n            }\n        }\n    };\n}\nfunction compareNewPassword($parse: ng.IParseService): ng.IDirective {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ngModelCtrl) {\n            ngModelCtrl['$validators'].ERROR_compareTo = function (modelValue, viewValue) {\n                if (ngModelCtrl['$isEmpty'](modelValue)) {\n                    return true;\n                }\n                let otherModelValue;\n                let otherModelValueGetter = $parse(attrs.compareTo1);\n\n                if (!modelValue || !!otherModelValue) return true;\n\n                if (otherModelValueGetter) {\n                    otherModelValue = otherModelValueGetter(scope);\n\n                    return modelValue != otherModelValue;\n                } else {\n                    return true;\n                }\n            }\n        }\n    };\n}\nfunction comparePasswordMatch($parse: ng.IParseService): ng.IDirective {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ngModelCtrl) {\n            ngModelCtrl['$validators'].ERROR_compareTo = function (modelValue, viewValue) {\n                if (ngModelCtrl['$isEmpty'](modelValue)) {\n                    return true;\n                }\n                let otherModelValue;\n                let otherModelValueGetter = $parse(attrs.compareTo2);\n\n                if (!modelValue || !!otherModelValue) return true;\n\n                if (otherModelValueGetter) {\n                    otherModelValue = otherModelValueGetter(scope);\n\n                    return modelValue == otherModelValue;\n                } else {\n                    return true;\n                }\n            }\n        }\n    };\n}\nangular.module('pipPasswordMatch', [])\n    .directive('pipCompareOldPassword', compareOldPassword)\n    .directive('pipCompareNewPassword', compareNewPassword)\n    .directive('pipComparePasswordMatch', comparePasswordMatch);","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(() => {\n    'use strict';\n\n    angular.module('pipEntry.Common', ['pipEntry.CommonService', 'pipEntry.Service'])\n   \n})();","import { Role } from './Role';\n\nexport class Account {\n    public roles: string[];\n    public theme: string;\n    public language: string;\n    public time_zone: string;\n    public create_time: string; // JSON date\n    public change_pwd_time: string; // JSON date\n    public login: string;\n    public name: string;\n    public id: string;\n    public custom_hdr?: any;\n    public custom_dat?: any;\n    public settings?: any;\n}","export class EmailSettings {\n    public name?: string;\n    public email?: string;\n    public language?: string;\n    public verified?: boolean;\n    public id?: string;\n}","import { SessionData } from './SessionData';\nimport { IEntryDataService } from './IEntryDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nclass EntryData implements IEntryDataService {\n    constructor(\n        private $stateParams: angular.ui.IStateParamsService,\n        private pipRest: pip.rest.IRestService,\n        private pipEntry: IEntryService,\n        private pipSession: pip.services.ISessionService\n    ) {\n        \"ngInject\";\n    }\n\n    public getUserId(): string {\n        let userId: string;\n        userId = this.pipSession.session ? this.pipSession.session.userId : null;\n\n        return userId;\n    }\n\n    public signup(params: any, successCallback?: (user: SessionData) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('signup').call(params, successCallback, errorCallback);\n    }\n\n    public recoverPassword(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('recoverPassword').call(\n            {\n                login: params.login\n            }, successCallback, errorCallback);\n    }\n\n    public resetPassword(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('resetPassword').call(\n            {\n                login: params.login,\n                code: params.code,\n                password: params.password\n            }, successCallback, errorCallback);\n    }\n\n    public expireChangePassword(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        let param = params || {};\n        param.user_id = this.getUserId();\n\n        return this.pipRest.getResource('changePassword').save(param, successCallback, errorCallback);\n    }\n\n    public requestEmailVerification(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('requestEmailVerification').call(\n            {\n     //           user_id: this.getUserId(),\n                login: params.login\n            }, successCallback, errorCallback);\n    }\n\n    public verifyEmail(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('verifyEmail').call(params, successCallback, errorCallback);\n    }\n\n    public readEmailSettings(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        let param = params || {};\n        param.user_id = param.user_id ? param.user_id : this.getUserId();  \n\n        return this.pipRest.getResource('email_settings').get(params, successCallback, errorCallback);\n    }\n\n    public signupValidate(login: string, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('signupValidate').get(\n            {\n                login: login\n            }, successCallback, errorCallback);\n    }\n\n    public saveSettingsKey(section: string, key: string, value: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        return this.pipRest.getResource('settings').save(\n            {\n                section: section,\n                key: key\n            },\n            { value: value },\n            (data: any) => {\n                if (successCallback) {\n                    successCallback(data);\n                }\n            },\n            (error: any) => {\n                if (errorCallback) {\n                    errorCallback(error);\n                }\n            });\n    }\n\n}\n\n\nangular\n    .module('pipEntryData', ['pipRest'])\n    .service('pipEntryData', EntryData);\n\n\n","export class GENDER {\n    static MALE: 'male';\n    static FEMALE: 'female';\n    static NOT_SPECIFIED: 'n/s'\n}\n","export class Role {\n\n}\n\n","export class Session {\n    public user_id: string;\n    public user_name: string;\n    public address: string;\n    public client: string;\n    public request_time: string; // JSON date\n    public open_time: string; // JSON date\n    public active: boolean;\n    public id: string;\n}","import { Session } from './Session';\nimport { Account } from './Account';\n\nexport class SessionData extends Session {\n    public user: Account;\n    public data: any; // todo\n    public change_pwd_time?: string; // JSON date\n}\n\n","import { ISessionDataService } from './ISessionDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nclass SessionData implements ISessionDataService {\n    private RESOURCE: string = 'sessions';\n    private RESOURCE_USER: string = 'userSessions';\n    private RESOURCE_RESTORE: string = 'restoreSessions';\n\n    constructor(\n        private $stateParams: angular.ui.IStateParamsService,\n        private pipRest: pip.rest.IRestService,\n        private pipSession: pip.services.ISessionService\n    ) {\n        \"ngInject\";\n    }\n\n    public getSessionId(): string {\n        let sessionId: string;\n        sessionId = this.pipSession.session ? this.pipSession.session.sessionId : null;\n\n        return sessionId;\n    }\n\n    public getUserId(): string {\n        let userId: string;\n        userId = this.pipSession.session ? this.pipSession.session.userId : null;\n\n        return userId;\n    }\n\n    public getSessions(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        return this.pipRest.getResource(this.RESOURCE).call(params, successCallback, errorCallback);\n    }\n\n    public restoreSession(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        params.session_id = this.getSessionId();\n\n        return this.pipRest.getResource(this.RESOURCE_RESTORE).call(params, successCallback, errorCallback);\n    }\n\n    public getUserSessions(params: any, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        params.user_id = this.getUserId();\n\n        return this.pipRest.getResource(this.RESOURCE_USER).get(params, successCallback, errorCallback);\n    }\n\n}\n\n\nangular\n    .module('pipSessionData', ['pipRest'])\n    .service('pipSessionData', SessionData);","// data model\nimport './Session';\nimport './Account';\nimport './Enums';\nimport './Role';\nimport './SessionData'\n\n// data services\nimport './SessionDataService';\nimport './ISessionDataService';\nimport './EntryDataService';\nimport './IEntryDataService';\n\nangular.module('pipEntry.Data', ['pipRest', 'pipEntryData', 'pipSessionData']);\n\nexport * from './IEntryDataService';\nexport * from './ISessionDataService';\nexport * from './Session';\nexport * from './Account';\nexport * from './Enums';\nexport * from './Role';\nexport * from './SessionData'","import { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { ExpireChangePasswordViewModel } from './ExpireChangePasswordViewModel';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class ExpireChangePasswordController {\n\n    constructor(\n        $state: ng.ui.IStateService,\n        private pipExpireChangePasswordViewModel: ExpireChangePasswordViewModel,\n        pipEntryCommon: IEntryCommonService,\n        pipEntry: IEntryService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipSession: pip.services.ISessionService,\n        private $window: ng.IWindowService\n    ) {\n        \"ngInject\";\n\n        pipEntryCommon.configureAppBar();\n\n        if (pipEntry.passwordExpire === false || !pipSession.isOpened()) {\n            $state.go(pipAuthState.signinState(), {});\n        }\n    }\n\n    public goBack() {\n        this.$window.history.back();\n    }\n\n    public get config(): any {\n        return this.pipExpireChangePasswordViewModel.config;\n    }\n\n    public onChange() {\n        this.pipExpireChangePasswordViewModel.onChange();\n    }\n}\n\n{\n    angular.module('pipEntry.ExpireChangePassword', ['pipEntry.Common', 'pipExpireChangePasswordPanel']);\n\n}","import { ExpireChangePasswordViewModel } from './ExpireChangePasswordViewModel';\n\nexport interface IExpireChangePasswordDialogService {\n    show(params: any, successCallback?: () => void, cancelCallback?: () => void): void;\n}\n\n{\n    class ExpireChangePasswordDialogService implements IExpireChangePasswordDialogService {\n        public constructor(private $mdDialog: angular.material.IDialogService) { };\n        public show(params: any, successCallback?: () => void, cancelCallback?: () => void) {\n            this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'expire_change_password/ExpireChangePasswordDialog.html',\n                controller: ExpireChangePasswordDialogController,\n                controllerAs: '$ctrl',\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n                .then(() => {\n                    if (successCallback) {\n                        successCallback();\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    class ExpireChangePasswordDialogController {\n        public goBack: any;\n\n        constructor(\n            $mdDialog: angular.material.IDialogService,\n            private pipExpireChangePasswordViewModel: ExpireChangePasswordViewModel\n        ) {\n            \"ngInject\";\n\n            this.goBack = $mdDialog.cancel;\n        }\n\n        public get config(): any {\n            return this.pipExpireChangePasswordViewModel.config;\n        }\n\n        public onChange() {\n            this.pipExpireChangePasswordViewModel.onChange(() => {\n                this.goBack();\n            });\n        }\n\n    }\n\n    angular.module('pipEntry.ExpireChangePasswordDialog', ['pipEntry.Common', \"pipExpireChangePasswordPanel\"])\n        .service('pipExpireChangePasswordDialog', ExpireChangePasswordDialogService);\n\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class ExpireChangePasswordModel extends EntryModel {\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: IEntryDataService,\n        private pipEntry: IEntryService,\n        private pipToasts: pip.controls.IToastService\n    ) {\n        \"ngInject\";\n\n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.expire_change_password');\n\n    }\n\n    public init($scope): void {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability(): void {\n        this.hideObject.subTitle = new Boolean(this.hideObject.subTitle) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    public onShowToast(message: string, type: string): void {\n        if (!message) return;\n        message = this.pipTranslate.translate(message);\n        type = type || 'message';\n\n        if (type == 'message') {\n            this.pipToasts.showMessage(message, null, null, null);\n            return;\n        }\n        if (type == 'error') {\n            this.pipToasts.showError(message, null, null, null, null);\n            return;\n        }\n    }\n\n    public onChange(callback?: () => void): void {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n\n            return;\n        }\n\n        const transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n\n        this.pipEntryData.expireChangePassword({\n            login: this.config.data.login,\n            old_password: this.config.data.password,\n            new_password: this.config.data.passwordNew,\n            user_id: this.pipEntryData.getUserId()\n        },\n            (data: any) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, false);\n                if (this.transaction.aborted(transactionId)) return;\n\n                const message = String() + 'EXPIRE_CHANGE_PWD_SUCCESS_TEXT';\n                this.onShowToast(message, 'message');\n                this.transaction.end();\n                if (callback) callback();\n                this.pipEntry.signout(\n                    () => {\n                        this.$state.go('signin', {\n                            server_url: this.config.data.serverUrl,\n                            login: this.config.data.login\n                        });\n                    }\n                );\n\n            },\n            (error: any) => {\n                this.transaction.end(error);\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                this.pipFormErrors.setFormError(\n                    this.config.form, error, {\n                        'NO_LOGIN': 'login', // Missing account login\n                        'WRONG_LOGIN': 'login', // Account  was not found\n                        'LOGIN_NOT_FOUND': 'login', // Account  was not found\n                        'WRONG_PASSWORD': 'password', // Invalid password\n                        'act_execute': 'form', // Unknown error\n                        '-1': 'form' // server not response\n                    }\n                );\n            }\n        );\n    }\n\n}","import { EntryPageConfig } from '../common/EntryPageConfig';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { ExpireChangePasswordViewModel } from './ExpireChangePasswordViewModel';\n\n{\n    interface IExpireChangePasswordPanelBindings {\n        [key: string]: any;\n\n\n    }\n\n    const ExpireChangePasswordPanelBindings: IExpireChangePasswordPanelBindings = {\n\n    }\n\n    class ExpireChangePasswordPanelController {\n        public touchedErrorsWithHint: Function;\n        constructor(\n            private $scope: ng.IScope,\n            private pipFormErrors: pip.errors.IFormErrorsService,\n            private pipRest: pip.rest.IRestService,\n            private pipExpireChangePasswordViewModel: ExpireChangePasswordViewModel\n        ) {\n            \"ngInject\";\n\n            this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n            pipExpireChangePasswordViewModel.initModel($scope);\n   \n\n        }\n\n        public $postLink(): void {\n            this.config.form = this.$scope.form;\n            this.config.data.password = null;\n            this.config.data.passwordNew = null;\n        }\n\n        public get config(): any {\n            return this.pipExpireChangePasswordViewModel.config;\n        }\n\n        public get transaction(): any {\n            return this.pipExpireChangePasswordViewModel.transaction;\n        }\n\n        public get showServerError(): any {\n            return this.pipExpireChangePasswordViewModel.showServerError;\n        }\n\n        public get hideObject(): any {\n            return this.pipExpireChangePasswordViewModel.hideObject;\n        }\n\n        public onServerUrlChanged() {\n            this.config.onServerUrlChanged(this.config.form, this.config.selected.searchURLs);\n        }\n    \n        public onChanged() {\n            this.pipFormErrors.resetFormErrors(this.config.form, false);\n            this.pipFormErrors.resetFieldsErrors(this.config.form, null);\n            this.pipRest.serverUrl = this.config.selected.searchURLs;\n            this.config.data.serverUrl = this.config.selected.searchURLs;\n        }\n\n        public onShowToast(message: string, type: string): void {\n            this.pipExpireChangePasswordViewModel.onShowToast(message, type);\n        }\n\n    }\n\n    const ExpireChangePasswordPanel: ng.IComponentOptions = {\n        bindings: ExpireChangePasswordPanelBindings,\n        controller: ExpireChangePasswordPanelController,\n        templateUrl: 'expire_change_password/ExpireChangePasswordPanel.html'\n    }\n\n    angular.module(\"pipExpireChangePasswordPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipExpireChangePasswordPanel', ExpireChangePasswordPanel);\n}","import { ExpireChangePasswordModel } from './ExpireChangePasswordModel';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class ExpireChangePasswordViewModel {\n    public model: ExpireChangePasswordModel;\n\n    constructor(\n        pipEntryCommon: any,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        pipEntry: IEntryService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: any,\n        private pipToasts: any\n    ) {\n        \"ngInject\";\n\n        this.model = new ExpireChangePasswordModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state,\n            $injector, pipAuthState, pipFormErrors, pipRest, pipTranslate, pipEntryData, pipEntry, pipToasts);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public onShowToast(message, type) {\n        this.model.onShowToast(message, type);\n    }\n\n    public onChange(callback?: () => void) {\n        this.model.onChange(callback);\n    }\n}\n\nangular.module('pipEntry.ExpireChangePassword')\n    .service('pipExpireChangePasswordViewModel', ExpireChangePasswordViewModel);","import './data';\nimport './rest';\nimport './common';\nimport { VerifyEmailController, VerifyEmailSuccessController } from './verify_email/VerifyEmail';\nimport { RecoverPasswordController } from './recover_password/RecoverPassword';\nimport { ResetPasswordController } from './reset_password/ResetPassword';\nimport { PostSignupController } from './post_signup/PostSignup';\nimport { SignoutController } from './signout/Signout';\nimport { ChangePasswordController } from './change_password/ChangePassword';\nimport { ExpireChangePasswordController } from './expire_change_password/ExpireChangePassword';\n\n\n{\n    const configEntryRoutes = function (\n        $stateProvider: any,\n        $locationProvider: ng.ILocationProvider,\n        $httpProvider: ng.IHttpProvider,\n        pipAuthStateProvider: pip.rest.IAuthStateProvider,\n        // pipPartyDataProvider: any\n    ) {\n        // Switch to HTML5 routing mode\n        //$locationProvider.html5Mode(true);\n        // Configure module routes for all users\n        $stateProvider\n            .state('recover_password', {\n                url: '/recover_password?server_url&email',\n                auth: false,\n                controllerAs: '$ctrl',\n                controller: RecoverPasswordController,\n                templateUrl: 'recover_password/RecoverPassword.html'\n            })\n            .state('change_password', {\n                url: '/change_password?server_url&login',\n                auth: true,\n                controllerAs: '$ctrl',\n                controller: ChangePasswordController,\n                templateUrl: 'change_password/ChangePassword.html'\n            })   \n            .state('expire_change_password', {\n                url: '/expire_change_password?server_url&login',\n                auth: true,\n                controllerAs: '$ctrl',\n                controller: ExpireChangePasswordController,\n                templateUrl: 'expire_change_password/ExpireChangePassword.html'\n            })                      \n            .state('reset_password', {\n                url: '/reset_password?server_url&email&reset_code',\n                auth: false,\n                controller: ResetPasswordController,\n                controllerAs: '$ctrl',\n                templateUrl: 'reset_password/ResetPassword.html'\n            })\n            .state('signout', {\n                url: '/signout',\n                controller: SignoutController,\n                auth: false\n            })\n            .state('post_signup', {\n                url: '/post_signup?party_id',\n                auth: true,\n                controller: PostSignupController,\n                controllerAs: '$ctrl',\n                templateUrl: 'post_signup/PostSignup.html'\n            })\n            .state('verify_email', {\n                url: '/verify_email?server_url&email&code&language',\n                auth: true,\n                controller: VerifyEmailController,\n                controllerAs: '$ctrl',\n                templateUrl: 'verify_email/VerifyEmail.html'\n            })\n            .state('verify_email_success', {\n                url: '/verify_email_success',\n                auth: true,\n                controller: VerifyEmailSuccessController,\n                controllerAs: '$ctrl',\n                templateUrl: 'verify_email/VerifyEmailSuccess.html'\n            });\n\n        // Set default paths and states\n        pipAuthStateProvider.signinState = 'signin';\n        pipAuthStateProvider.signoutState = 'signout';\n    }\n\n    angular.module('pipEntry', [\n        'ui.router', 'ngMessages', 'ngCookies', 'LocalStorageModule',\n\n        'pipControls', 'pipLocations', 'pipErrors',\n        'pipTranslate', 'pipCommonRest',\n\n        'pipEntry.Strings',\n        'pipEntry.Data', 'pipEntry.Rest',\n        'pipEntry.Common', 'pipEntry.Signin', 'pipEntry.Signup',\n        'pipEntry.PostSignup', 'pipEntry.VerifyEmail',\n        'pipEntry.RecoverPassword', 'pipEntry.ResetPassword',\n        'pipEntry.ResetPasswordDialog', 'pipEntry.RecoverPasswordDialog',\n        'pipEntry.ChangePassword', 'pipEntry.ChangePasswordDialog',        \n        'pipEntry.ExpireChangePassword', 'pipEntry.ExpireChangePasswordDialog',     \n        'pipEntry.Templates'\n    ])\n        .config(configEntryRoutes);\n}\n\nexport * from './data';","import { PostSignupViewModel } from './PostSignupViewModel';\n\nexport class PostSignupController implements ng.IController {\n\tpublic $onInit() {}\n\t\n    constructor(\n        private $window: ng.IWindowService,\n        public $party: any,\n        private pipPostSignupViewModel: PostSignupViewModel\n    ) {\n        \"ngInject\";\n\n    }\n\n    public onPostSignupSubmit() {\n        this.pipPostSignupViewModel.onPostSignupSubmit();\n    }\n\n    public get transaction(): any {\n        return this.pipPostSignupViewModel.transaction;\n    }\n}\n\n{\n    angular.module('pipEntry.PostSignup', ['pipEntry.Common', \"pipPostSignupPanel\"])\n        .controller('pipPostSignupController', PostSignupController);\n}","import { PostSignupViewModel } from './PostSignupViewModel';\n\nexport interface IPostSignupDialogService {\n    show(params: any, successCallback?: () => void, cancelCallback?: () => void): void;\n}\n\n{\n    class PostSignupDialogService implements IPostSignupDialogService {\n        public constructor(private $mdDialog: angular.material.IDialogService) { };\n        public show(params: any, successCallback?: () => void, cancelCallback?: () => void) {\n            this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'post_signup/PostSignupDialog.html',\n                controller: PostSignupDialogController,\n                controllerAs: '$ctrl',\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n                .then(() => {\n                    if (successCallback) {\n                        successCallback();\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    class PostSignupDialogController {\n        public $party: any;\n        public goBack: any;\n\n        constructor(\n            $mdDialog: angular.material.IDialogService,\n            params: any,\n            private pipPostSignupViewModel: PostSignupViewModel\n        ) {\n            \"ngInject\";\n\n            this.goBack = $mdDialog.cancel;\n            this.$party = params.$party;\n        }\n\n        public onPostSignupSubmit() {\n            this.pipPostSignupViewModel.onPostSignupSubmit(() => {\n                this.goBack();\n            });\n        }\n\n        public get transaction() {\n            return this.pipPostSignupViewModel.transaction;\n        }\n    }\n\n    angular.module('pipEntry.PostSignupDialog', ['pipEntry.Common', \"pipPostSignupPanel\"])\n        .service('pipPostSignupDialog', PostSignupDialogService);\n\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class PostSignupModel extends EntryModel {\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipErrorPageConfigService: pip.errors.IErrorPageConfigService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipEntry: IEntryService,\n        private pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: IEntryDataService,\n        private pipToasts: pip.controls.IToastService\n    ) {\n        \"ngInject\";\n\n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.signin');\n    }\n\n    public init($scope) {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability() {\n        this.hideObject.subTitle = new Boolean(this.hideObject.subTitle) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.successTitle = new Boolean(this.hideObject.successTitle) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    private checkSupported(): boolean {\n        let pipSystemInfo: any = this.$injector.has('pipSystemInfo') ? this.$injector.get('pipSystemInfo') : null;\n        if (!pipSystemInfo) {\n            return true;\n        }\n\n        if (!this.pipErrorPageConfigService || !this.pipErrorPageConfigService.configs || \n            !this.pipErrorPageConfigService.configs.Unsupported || !this.pipErrorPageConfigService.configs.Unsupported.Active) {\n\n            return true;\n        }\n\n        let browser: string = pipSystemInfo.browserName;\n        let version: string = pipSystemInfo.browserVersion;\n        version = version.split(\".\")[0];\n\n        let supported = this.pipErrorPageConfigService.configs.Unsupported.Params && this.pipErrorPageConfigService.configs.Unsupported.Params.supported ? this.pipErrorPageConfigService.configs.Unsupported.Params.supported : null;\n        if (!supported) {\n\n            return true;\n        }\n\n        if (browser && supported[browser] && version >= supported[browser]) {\n            return true;\n        }\n\n        this.pipEntry.signout();\n        this.$state.go(pip.errors.ErrorsUnsupportedState); \n        return false;\n    }\n\n    public onPostSignupSubmit(callback?: () => void) {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n            return;\n        }\n\n        var transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n\n        if (callback) callback();\n        // this.pipPartyData.createParty(\n        //     this.config.data,\n        //     (party) => {\n        //         this.pipFormErrors.resetFormErrors(this.config.form, false);\n        //         if (this.transaction.aborted(transactionId)) return;\n\n        //         this.transaction.end();\n\n        //         if (this.checkSupported()) {\n        //             this.pipAuthState.goToAuthorized({\n        //                 party_id: party.id\n        //             });\n        //         }\n\n        //     },\n        //     (error) => {\n        //         this.transaction.end(error);\n        //         this.pipFormErrors.resetFormErrors(this.config.form, true);\n        //         this.pipFormErrors.setFormError(\n        //             this.config.form, error, {\n        //                 1000: 'form', // Unknown error\n        //                 1110: 'form', // Account is locked\n        //                 1111: 'form', // Number of attempts exceeded. Account was locked\n        //                 1112: 'form', // Account is not active\n        //                 '-1': 'form' // server not response\n        //             }\n        //         );\n        //     }\n        // );\n    }\n}","import { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { PostSignupViewModel } from './PostSignupViewModel';\nimport { GENDER } from '../data/Enums';\n\n{\n    interface IPostSignupPanelBindings {\n        [key: string]: any;\n\n        $party: any;\n    }\n\n    const PostSignupPanelBindings: IPostSignupPanelBindings = {\n        $party: '=pipParty',\n    }\n\n    class PostSignupPanelController {\n        public $party: any;\n        public picture: any;\n        public touchedErrorsWithHint: Function;\n\n        constructor(\n            private $scope: ng.IScope,\n            pipTranslate: pip.services.ITranslateService,\n            pipFormErrors: pip.errors.IFormErrorsService,\n            private pipPostSignupViewModel: PostSignupViewModel\n        ) {\n             \"ngInject\";\n\n            pipPostSignupViewModel.initModel($scope);\n            this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n            this.config.data = {\n                id: this.$party.id,\n                name: this.$party.name,\n                email: this.$party.email,\n                about: this.$party.about,\n                language: pipTranslate.language,\n                birthday: this.$party.birthday,\n                gender: this.$party.gender || GENDER.NOT_SPECIFIED,\n                location: this.$party.location\n            };\n        }\n\n        public $postLink() {\n            this.config.form = this.$scope.form;\n        }\n\n        public get config(): any {\n            return this.pipPostSignupViewModel.config;\n        }\n\n        public get transaction(): any {\n            return this.pipPostSignupViewModel.transaction;\n        }\n\n        public get showServerError(): any {\n            return this.pipPostSignupViewModel.showServerError;\n        }\n\n        public get hideObject(): any {\n            return this.pipPostSignupViewModel.hideObject;\n        }\n\n        public onPictureChanged($control) {\n            if (!this.config.enableAvatar) { return }\n\n            if (this.picture)\n                this.picture.save(\n                    // Success callback\n                    function () {},\n                    // Error callback\n                    function (error) {\n                    }\n                );\n        }\n\n        public onPictureCreated($event) {\n            this.picture = $event.sender;\n        }\n    }\n\n    const PostSignupPanel: ng.IComponentOptions = {\n        bindings: PostSignupPanelBindings,\n        templateUrl: 'post_signup/PostSignupPanel.html',\n        controller: PostSignupPanelController\n    }\n\n    angular.module(\"pipPostSignupPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipPostSignupPanel', PostSignupPanel);\n}","import { PostSignupModel } from './PostSignupModel';\nimport { IEntryService } from \"../common/EntryService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\n\nexport class PostSignupViewModel {\n    public model: PostSignupModel;\n\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipErrorPageConfigService: pip.errors.IErrorPageConfigService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipEntry: IEntryService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: IEntryDataService,\n        private pipToasts: pip.controls.IToastService\n    ) {\n        \"ngInject\";\n\n        this.model = new PostSignupModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state, $injector,\n            pipErrorPageConfigService, pipAuthState, pipFormErrors, pipEntry, pipRest, pipTranslate, pipEntryData, pipToasts);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public onPostSignupSubmit(callback?: () => void) {\n        this.model.onPostSignupSubmit(callback);\n    }\n}\n\nangular.module('pipEntry.PostSignup')\n    .service('pipPostSignupViewModel', PostSignupViewModel);","import { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { RecoverPasswordViewModel } from './RecoverPasswordViewModel';\nimport { IResetPasswordDialogService } from '../reset_password/ResetPasswordDialog';\n\nexport class RecoverPasswordController {\n    constructor(\n        private $scope: ng.IScope,\n        private pipRecoverPasswordViewModel: RecoverPasswordViewModel,\n        private pipResetPasswordDialog: IResetPasswordDialogService,\n        pipEntryCommon: IEntryCommonService,\n        private $state: ng.ui.IStateService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private $window: ng.IWindowService\n    ) {\n        \"ngInject\";\n\n        pipEntryCommon.configureAppBar();\n    }\n\n    public goBack(): void {\n        this.$state.go(this.pipAuthState.signinState());\n    }\n\n    public get transaction(): any {\n        return this.pipRecoverPasswordViewModel.transaction;\n    }\n\n    public get config(): any {\n        return this.pipRecoverPasswordViewModel.config;\n    }\n\n    public onRecover(): void {\n        this.pipRecoverPasswordViewModel.onRecover(\n            () => {\n                this.pipResetPasswordDialog.show(\n                    {},\n                    () => {\n                        // reinit recovery panel\n                        this.$scope.$broadcast('RecoverPasswordInit');\n                    },\n                    () => {\n                        // reinit recovery panel\n                        this.$scope.$broadcast('RecoverPasswordInit');\n                    }\n                );\n            }\n        );\n    }\n}\n\n{\n    angular.module('pipEntry.RecoverPassword', ['pipEntry.Common', 'pipRecoverPasswordPanel', 'pipEntry.ResetPasswordDialog']);\n}","import { RecoverPasswordViewModel } from './RecoverPasswordViewModel';\nimport { IResetPasswordDialogService } from '../reset_password/ResetPasswordDialog';\n\nexport interface IRecoverPasswordDialogService {\n    show(params: any, successCallback?: () => void, cancelCallback?: () => void): void;\n}\n\n{\n    class RecoverPasswordDialogService implements IRecoverPasswordDialogService {\n        public constructor(private $mdDialog: angular.material.IDialogService) { };\n        public show(params: any, successCallback?: () => void, cancelCallback?: () => void) {\n            this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'recover_password/RecoverPasswordDialog.html',\n                controller: RecoverPasswordDialogController,\n                controllerAs: '$ctrl',\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n                .then(() => {\n                    if (successCallback) {\n                        successCallback();\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    class RecoverPasswordDialogController {\n        public goBack: any;\n\n        constructor(\n            private pipResetPasswordDialog: IResetPasswordDialogService,\n            private pipRecoverPasswordViewModel: RecoverPasswordViewModel,\n            private pipFormErrors : pip.errors.IFormErrorsService,\n            private $mdDialog: angular.material.IDialogService\n        ) {\n            \"ngInject\";\n\n            this.goBack = $mdDialog.cancel;\n        }\n\n        public get transaction(): any {\n            return this.pipRecoverPasswordViewModel.transaction;\n        }\n\n        public get config(): any {\n            return this.pipRecoverPasswordViewModel.config;\n        }\n\n        public onRecover(): void {\n            this.$mdDialog.cancel;\n            this.pipRecoverPasswordViewModel.onRecover(\n                () => {\n                    this.pipResetPasswordDialog.show({});\n                }\n            );\n        }\n    }\n\n    angular.module('pipEntry.RecoverPasswordDialog', ['pipEntry.Common', \"pipRecoverPasswordPanel\",\n        'pipEntry.ResetPasswordDialog'\n    ])\n        .service('pipRecoverPasswordDialog', RecoverPasswordDialogService);\n\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\n\nexport class RecoverPasswordModel extends EntryModel {\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors : pip.errors.IFormErrorsService,\n        private pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: IEntryDataService,\n        private pipToasts: pip.controls.IToastService\n    ) {\n        \"ngInject\";\n        \n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.signin');\n    }\n\n    public init($scope): void {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability(): void {\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.subTitle1 = new Boolean(this.hideObject.subTitle1) == true;\n        this.hideObject.subTitle2 = new Boolean(this.hideObject.subTitle2) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    public onRecover(gotoReset: () => void): void {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n            return;\n        }\n        const transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n        \n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n        this.pipEntryData.recoverPassword({\n                login: this.config.data.login\n            },\n            (data: any) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                if (this.transaction.aborted(transactionId)) return;\n\n                this.transaction.end();\n                if (!gotoReset) {\n                    this.$state.go('reset_password', {\n                        server_url: this.config.data.serverUrl,\n                        login: this.config.data.login\n                    });\n                } else {\n                    gotoReset();\n                }\n            },\n            (error: any) => {\n                this.transaction.end(error);\n                this.pipFormErrors.setFormError(\n                    this.config.form, error, {\n                        'WRONG_LOGIN': 'login', // Account  was not found\n                        'NO_LOGIN': 'login', // Missing account login\n                        'LOGIN_NOT_FOUND': 'login', // Missing account login\n                        'act_execute': 'form', // Unknown error\n                        '-1': 'form' // server not response\n                    }\n                );\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n            }\n        );\n    };\n}","import { EntryPageConfig } from '../common/EntryPageConfig';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { RecoverPasswordViewModel } from './RecoverPasswordViewModel';\n\n{\n    interface IRecoverPasswordPanelBindings {\n        [key: string]: any;\n\n    }\n\n    const RecoverPasswordPanelBindings: IRecoverPasswordPanelBindings = {\n\n    }\n\n    class RecoverPasswordPanelController {\n        public touchedErrorsWithHint: Function;\n        constructor(\n            private $scope: ng.IScope,\n            private pipFormErrors: pip.errors.IFormErrorsService,\n            private pipRest: pip.rest.IRestService,\n            private pipRecoverPasswordViewModel: RecoverPasswordViewModel\n        ) {\n            \"ngInject\";\n            \n            this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n            pipRecoverPasswordViewModel.initModel($scope);\n\n            this.$scope.$on('RecoverPasswordInit', () => {\n                this.config.form = this.$scope.form;\n            });\n        }\n\n        public $postLink(): void {\n            this.config.form = this.$scope.form;\n            this.config.data.password = null;\n            this.config.data.passwordNew = null;\n        }\n\n        public get config(): any {\n            return this.pipRecoverPasswordViewModel.config;\n        }\n\n        public get transaction(): any {\n            return this.pipRecoverPasswordViewModel.transaction;\n        }\n\n        public get showServerError(): any {\n            return this.pipRecoverPasswordViewModel.showServerError;\n        }\n\n        public onServerUrlChanged() {\n            this.config.onServerUrlChanged(this.config.form, this.config.selected.searchURLs);\n        }\n    \n        public onChanged() {\n            this.pipFormErrors.resetFormErrors(this.config.form, false);\n            this.pipFormErrors.resetFieldsErrors(this.config.form, null);\n            this.pipRest.serverUrl = this.config.selected.searchURLs;\n            this.config.data.serverUrl = this.config.selected.searchURLs;\n        }\n\n        public get hideObject(): any {\n            return this.pipRecoverPasswordViewModel.hideObject;\n        }\n    }\n\n    const RecoverPasswordPanel: ng.IComponentOptions = {\n        bindings: RecoverPasswordPanelBindings,\n        controller: RecoverPasswordPanelController,\n        templateUrl: 'recover_password/RecoverPasswordPanel.html'\n    }\n\n    angular.module(\"pipRecoverPasswordPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipRecoverPasswordPanel', RecoverPasswordPanel);\n}","import { RecoverPasswordModel } from './RecoverPasswordModel';\n\nexport class RecoverPasswordViewModel {\n    public model: RecoverPasswordModel;\n\n    constructor(\n        pipEntryCommon: any,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: any,\n        private pipToasts: any\n    ) {\n        \"ngInject\";\n\n        this.model = new RecoverPasswordModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state,\n            $injector, pipAuthState, pipFormErrors, pipRest, pipTranslate, pipEntryData, pipToasts);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope): void {\n        this.model.init($scope);\n    }\n\n    public onRecover(gotoReset: any): void {\n        this.model.onRecover(gotoReset);\n    }\n}\n\nangular.module('pipEntry.RecoverPassword')\n    .service('pipRecoverPasswordViewModel', RecoverPasswordViewModel);","import { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { ResetPasswordViewModel } from './ResetPasswordViewModel';\n\nexport class ResetPasswordController {\n\n    constructor(\n        private pipResetPasswordViewModel: ResetPasswordViewModel,\n        pipEntryCommon: IEntryCommonService,\n        private $window: ng.IWindowService\n    ) {\n        \"ngInject\";\n\n        pipEntryCommon.configureAppBar();\n    }\n\n    public goBack() {\n        this.$window.history.back();\n    }\n\n    public get config(): any {\n        return this.pipResetPasswordViewModel.config;\n    }\n\n    public onReset() {\n        this.pipResetPasswordViewModel.onReset();\n    }\n}\n\n{\n    angular.module('pipEntry.ResetPassword', ['pipEntry.Common', 'pipResetPasswordPanel',\n        'pipEmailUnique'\n    ]);\n\n}","import { ResetPasswordViewModel } from './ResetPasswordViewModel';\n\nexport interface IResetPasswordDialogService {\n    show(params: any, successCallback?: () => void, cancelCallback?: () => void): void;\n}\n\n{\n    class ResetPasswordDialogService implements IResetPasswordDialogService {\n        public constructor(private $mdDialog: angular.material.IDialogService) { };\n        public show(params: any, successCallback?: () => void, cancelCallback?: () => void) {\n            this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'reset_password/ResetPasswordDialog.html',\n                controller: ResetPasswordDialogController,\n                controllerAs: '$ctrl',\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n                .then(() => {\n                    if (successCallback) {\n                        successCallback();\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    class ResetPasswordDialogController {\n        public goBack: any;\n\n        constructor(\n            $mdDialog: angular.material.IDialogService,\n            private pipResetPasswordViewModel: ResetPasswordViewModel\n        ) {\n            \"ngInject\";\n\n            this.goBack = $mdDialog.cancel;\n        }\n\n        public get config(): any {\n            return this.pipResetPasswordViewModel.config;\n        }\n\n        public onReset() {\n            this.pipResetPasswordViewModel.onReset(() => {\n                this.goBack();\n            });\n        }\n\n        public onCancel() {\n            this.goBack();\n        }\n\n    }\n\n    angular.module('pipEntry.ResetPasswordDialog', ['pipEntry.Common', \"pipResetPasswordPanel\"])\n        .service('pipResetPasswordDialog', ResetPasswordDialogService);\n\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\n\nexport class ResetPasswordModel extends EntryModel {\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        // private $scope: ng.IScope,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        // private $timeout: ng.ITimeoutService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: IEntryDataService,\n        private pipToasts: pip.controls.IToastService\n    ) {\n        \"ngInject\";\n\n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.signin');\n\n    }\n\n    public init($scope): void {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability(): void {\n        this.hideObject.subTitle = new Boolean(this.hideObject.subTitle) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    public onShowToast(message: string, type: string): void {\n        if (!message) return;\n        message = this.pipTranslate.translate(message);\n        type = type || 'message';\n\n        if (type == 'message') {\n            this.pipToasts.showMessage(message, null, null, null);\n            return;\n        }\n        if (type == 'error') {\n            this.pipToasts.showError(message, null, null, null, null);\n            return;\n        }\n    }\n\n    public onReset(callback?: () => void): void {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n\n            return;\n        }\n\n        const transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n        this.pipEntryData.resetPassword({\n            login: this.config.data.login,\n            code: this.config.data.resetCode,\n            password: this.config.data.password\n        },\n            (data: any) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, false);\n                if (this.transaction.aborted(transactionId)) return;\n\n                const message = String() + 'RESET_PWD_SUCCESS_TEXT';\n                this.onShowToast(message, 'message');\n                this.transaction.end();\n                if (callback) callback();\n                this.$state.go('signin', {\n                    server_url: this.config.data.serverUrl,\n                    login: this.config.data.login\n                });\n            },\n            (error: any) => {\n                this.transaction.end(error);\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                this.pipFormErrors.setFormError(\n                    this.config.form, error, {\n                        'NO_LOGIN': 'login', // Missing account login\n                        'WRONG_LOGIN': 'login', // Account  was not found\n                        'LOGIN_NOT_FOUND': 'login', // Account  was not found\n                        'WRONG_PASSWORD': 'password', // Invalid password\n                        'WRONG_CODE': 'resetCode', // Invalid password recovery code\n                        'act_execute': 'form', // Unknown error\n                        '-1': 'form' // server not response\n                    }\n                );\n            }\n        );\n    }\n\n}","import { EntryPageConfig } from '../common/EntryPageConfig';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { ResetPasswordViewModel } from './ResetPasswordViewModel';\n\n{\n    interface IResetPasswordPanelBindings {\n        [key: string]: any;\n\n\n    }\n\n    const ResetPasswordPanelBindings: IResetPasswordPanelBindings = {\n\n    }\n\n    class ResetPasswordPanelController {\n        public touchedErrorsWithHint: Function;\n        constructor(\n            private $scope: ng.IScope,\n            private pipFormErrors: pip.errors.IFormErrorsService,\n            private pipRest: pip.rest.IRestService,\n            private pipResetPasswordViewModel: ResetPasswordViewModel\n        ) {\n            \"ngInject\";\n\n            this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n            pipResetPasswordViewModel.initModel($scope);\n     \n        }\n\n        public $postLink(): void {\n            this.config.form = this.$scope.form;\n            this.config.data.password = null;\n            this.config.data.passwordNew = null;\n        }\n\n        public get config(): any {\n            return this.pipResetPasswordViewModel.config;\n        }\n\n        public get transaction(): any {\n            return this.pipResetPasswordViewModel.transaction;\n        }\n\n        public get showServerError(): any {\n            return this.pipResetPasswordViewModel.showServerError;\n        }\n\n        public get hideObject(): any {\n            return this.pipResetPasswordViewModel.hideObject;\n        }\n\n        public onServerUrlChanged() {\n            this.config.onServerUrlChanged(this.config.form, this.config.selected.searchURLs);\n        }\n    \n        public onChanged() {\n            this.pipFormErrors.resetFormErrors(this.config.form, false);\n            this.pipFormErrors.resetFieldsErrors(this.config.form, null);\n            this.pipRest.serverUrl = this.config.selected.searchURLs;\n            this.config.data.serverUrl = this.config.selected.searchURLs;\n        }\n\n        public onShowToast(message: string, type: string): void {\n            this.pipResetPasswordViewModel.onShowToast(message, type);\n        }\n\n    }\n\n    const ResetPasswordPanel: ng.IComponentOptions = {\n        bindings: ResetPasswordPanelBindings,\n        controller: ResetPasswordPanelController,\n        templateUrl: 'reset_password/ResetPasswordPanel.html'\n    }\n\n    angular.module(\"pipResetPasswordPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipResetPasswordPanel', ResetPasswordPanel);\n}","import { ResetPasswordModel } from './ResetPasswordModel';\n\nexport class ResetPasswordViewModel {\n    public model: ResetPasswordModel;\n\n    constructor(\n        pipEntryCommon: any,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        private pipTranslate: pip.services.ITranslateService,\n        private pipEntryData: any,\n        private pipToasts: any\n    ) {\n        \"ngInject\";\n\n        this.model = new ResetPasswordModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state,\n            $injector, pipAuthState, pipFormErrors, pipRest, pipTranslate, pipEntryData, pipToasts);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public onShowToast(message, type) {\n        this.model.onShowToast(message, type);\n    }\n\n    public onReset(callback?: () => void) {\n        this.model.onReset(callback);\n    }\n}\n\nangular.module('pipEntry.ResetPassword')\n    .service('pipResetPasswordViewModel', ResetPasswordViewModel);","function configEntryResources(pipRestProvider: pip.rest.IRestProvider) {\n    // resource, url, path, defaultParams, actions\n    pipRestProvider.registerOperation('signin', '/api/v1/signin');\n    pipRestProvider.registerOperation('signout', '/api/v1/signout');\n    pipRestProvider.registerOperation('signup', '/api/v1/signup');\n    pipRestProvider.registerOperation('recoverPassword', '/api/v1/passwords/recover');\n    pipRestProvider.registerOperation('resetPassword', '/api/v1/passwords/reset');\n    pipRestProvider.registerCollection('changePassword', '/api/v1/passwords/:user_id/change',\n     { user_id: '@user_id' });\n\n    pipRestProvider.registerOperation('requestEmailVerification', '/api/v1/email_settings/resend');\n    pipRestProvider.registerOperation('verifyEmail', '/api/v1/email_settings/verify');\n    pipRestProvider.registerOperation('email_settings', '/api/v1/email_settings/:user_id', \n        { user_id: '@user_id' },\n        {\n            get: { method: 'GET', isArray: false }\n        }\n    ); \n    pipRestProvider.registerOperation('signupValidate', '/api/v1/signup/validate', {},\n        {\n            get: { method: 'GET', isArray: false }\n        }\n    ); \n}\n\nangular\n    .module('pipEntry.Rest')\n    .config(configEntryResources);\n\n\n","function configSessionResources(pipRestProvider: pip.rest.IRestProvider) {\n    pipRestProvider.registerPagedCollection('sessions', '/api/v1/sessions');\n    pipRestProvider.registerOperation('restoreSessions', '/api/v1/sessions/restore');\n    pipRestProvider.registerPagedCollection('userSessions', '/api/v1//sessions/:user_id');\n}\n\nangular\n    .module('pipEntry.Rest')\n    .config(configSessionResources);\n\n","function configSettingsResources(pipRestProvider: pip.rest.IRestProvider) {\n    // resource, url, path, defaultParams, actions\n    pipRestProvider.registerPagedCollection('settings', '/api/v1/settings/:section/:key',\n        { section: '@section' },\n        {\n            update: { method: 'PUT' }\n        }\n    );\n}\n\nangular\n    .module('pipEntry.Rest')\n    .config(configSettingsResources);","\n\nangular.module('pipEntry.Rest', []);\n\nimport './EntryResources';\nimport './SettingsResources';\nimport './SessionResources';","/// <reference path=\"../../typings/tsd.d.ts\" />\nimport { IEntryService } from \"../common/EntryService\";\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\n\nexport const isSignin = 'isSignin';\n\n{\n    class SigninController {\n        public fixedServerUrl: boolean = false;\n        constructor(\n            $scope: ng.IScope,\n            $rootScope: ng.IRootScopeService,\n            pipEntry: IEntryService,\n            pipEntryCommon: IEntryCommonService,\n            pipSession: pip.services.ISessionService\n        ) {\n            \"ngIngect\";\n\n            pipEntryCommon.configureAppBar();\n            // if (!$rootScope[isSignin] && pipSession.isOpened()) { // ??\n            //     pipEntry.signout(); // hack for set language\n            // }\n            $rootScope[isSignin] = false;\n            this.fixedServerUrl = $scope['fixedServerUrl'];\n        }\n    }\n\n    const SigninConfig = ($stateProvider, pipAuthStateProvider) => {\n\n        $stateProvider\n            .state('signin', {\n                url: '/signin?login&server_url&redirect_to&language&email',\n                auth: false,\n                controller: SigninController,\n                controllerAs: '$ctrl',\n                templateUrl: 'signin/Signin.html'\n            })\n        pipAuthStateProvider.signinState = 'signin';\n    }\n\n    angular.module('pipEntry.Signin', ['pipEntry.Common', \"pipSigninPanel\"])\n        .config(SigninConfig)\n\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\nimport { IEntryService } from \"../common/EntryService\";\n\ninterface ISigninDialogService {\n    show(params: any, successCallback ? : () => void, cancelCallback ? : () => void): void;\n}\n\nclass SigninDialogService implements ISigninDialogService {\n\n    public constructor(private $mdDialog: angular.material.IDialogService) {}\n    public show(params: any, successCallback ? : () => void, cancelCallback ? : () => void) {\n        this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'signin/SigninDialog.html',\n                controller: SigninDialogController,\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n            .then(() => {\n                if (successCallback) {\n                    successCallback();\n                }\n            }, () => {\n                if (cancelCallback) {\n                    cancelCallback();\n                }\n            });\n    }\n}\n\nexport interface ISigninDialogController {\n    pipGotoSignupDialog: Function;\n    pipGotoRecoverPasswordDialog: Function;\n}\n\nclass SigninDialogController implements ISigninDialogController {\n    public pipGotoSignupDialog: Function;\n    public pipGotoRecoverPasswordDialog: Function;\n\n    constructor(\n        private pipSignupDialog,\n        private pipRecoverPasswordDialog,\n        private pipEntry: IEntryService,\n    ) {\n        \"ngInject\";\n        \n        //pipEntry.signout();\n        this.pipGotoSignupDialog = () => {\n            this.gotoSignupDialog();\n        }\n        this.pipGotoRecoverPasswordDialog = () => {\n            this.gotoRecoverPasswordDialog();\n        }\n    }\n\n    private gotoSignupDialog() {\n        this.pipSignupDialog.show({});\n    }\n\n    private gotoRecoverPasswordDialog() {\n        this.pipRecoverPasswordDialog.show({});\n    }\n}\n\n{\n\n    angular.module('pipEntry.SigninDialog', [\n            'pipEntry.Common',\n            'pipSigninPanel',\n            'pipEntry.SignupDialog',\n            'pipEntry.RecoverPasswordDialog'\n        ])\n        .service('pipSigninDialog', SigninDialogService);\n\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryService } from \"../common/EntryService\";\nimport { AuthSessionData } from '../common/EntryPageConfig';\nimport { SessionData } from '../data/SessionData';\nimport { EmailSettings } from '../data/EmailSettings';\n\nexport class SinginModel extends EntryModel {\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipErrorPageConfigService: pip.errors.IErrorPageConfigService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipEntry: IEntryService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipNavService: pip.nav.INavService,\n        private pipRest: pip.rest.IRestService,\n    ) {\n        \"ngInject\";\n        \n        super(pipEntryCommon);\n\n        this.transaction = pipTransaction.create('entry.signin');\n    }\n\n    public init($scope) {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability() {\n        this.hideObject.remember = new Boolean(this.hideObject.remember) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.forgotPassword = new Boolean(this.hideObject.forgotPassword) == true;\n        this.hideObject.signup = new Boolean(this.hideObject.signup) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    private checkSupported(): boolean {\n        let pipSystemInfo: any = this.$injector.has('pipSystemInfo') ? this.$injector.get('pipSystemInfo') : null;\n        if (!pipSystemInfo) {\n            return true;\n        }\n\n        if (!this.pipErrorPageConfigService || !this.pipErrorPageConfigService.configs || \n            !this.pipErrorPageConfigService.configs.Unsupported || !this.pipErrorPageConfigService.configs.Unsupported.Active) {\n\n            return true;\n        }\n\n        let browser: string = pipSystemInfo.browserName;\n        let version: string = pipSystemInfo.browserVersion;\n        version = version.split(\".\")[0];\n\n        let supported = this.pipErrorPageConfigService.configs.Unsupported.Params && this.pipErrorPageConfigService.configs.Unsupported.Params.supported ? this.pipErrorPageConfigService.configs.Unsupported.Params.supported : null;\n        if (!supported) {\n\n            return true;\n        }\n\n        if (browser && supported[browser] && version >= supported[browser]) {\n            return true;\n        }\n\n        this.pipEntry.signout();\n        this.$state.go(pip.errors.ErrorsUnsupportedState); \n        return false;\n    }\n\n    public gotoSignup(gotoSignupPage: any, gotoSignupDialog: any): void {\n        if (!gotoSignupPage && !gotoSignupDialog) {\n            this.$state.go('signup', {\n                server_url: this.config.data.serverUrl,\n                login: this.config.data.login\n            });\n            return;\n        }\n        if (gotoSignupPage) {\n            this.$state.go(gotoSignupPage);\n            return;\n        }\n        if (gotoSignupDialog) {\n            gotoSignupDialog();\n            return;\n        }\n    }\n\n    public gotoRecoverPassword(gotoRecoverPasswordDialog: any): void {\n\n        if (!gotoRecoverPasswordDialog) {\n            this.$state.go('recover_password', {\n                server_url: this.config.data.serverUrl,\n                login: this.config.data.login\n            });\n            return;\n        }\n        if (gotoRecoverPasswordDialog) {\n            gotoRecoverPasswordDialog();\n            return;\n        }\n    }\n\n    private inSigninComplete(data: SessionData): void {\n        if (this.checkSupported()) {\n            let passwordExpire: boolean = false;\n            // check password change\n            if (this.pipEntry.passwordExpire && data.user && data.user.change_pwd_time) {\n                let expireDate = new Date(data.user.change_pwd_time);\n                let nowDate = new Date();\n                \n                passwordExpire = expireDate.getTime() < nowDate.getTime();\n            }\n            if (passwordExpire) {\n                this.pipAuthState.go('change_password', {\n                    login: this.config.data.login,\n                    server_url: this.pipRest.serverUrl\n                    // redirect_to: this.pipAuthState.params.redirect_to\n                });\n            } else if (this.pipAuthState.params.redirect_to) {\n                if (this.pipAuthState.params.toState) {\n                    if (this.pipAuthState.params.toState != this.pipAuthState.signinState) {\n                        this.pipAuthState.go(this.pipAuthState.params.toState, this.pipAuthState.params.toParams)\n                    } else {\n                        this.pipAuthState.goToAuthorized({});\n                    }\n                } else {\n                    if (decodeURIComponent(this.pipAuthState.params.redirect_to) != '/signin') {\n                        this.$location.url(decodeURIComponent(this.pipAuthState.params.redirect_to));\n                    } else {\n                        this.pipAuthState.goToAuthorized({});\n                    }\n                }\n            } else {\n                this.pipAuthState.goToAuthorized({});\n            }\n\n            this.pipNavService.sidenav.show();\n        }\n    }\n\n    private checkEmailVerification(data: SessionData): boolean {\n        return data.user && data.user.settings &&\n            data.user.settings['verified_email'] && data.user.settings['verified_email'] == \"true\";\n    }\n\n    public onSignin(rememberDefault: boolean): void {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n            return;\n        }\n\n        let transactionId: string = this.transaction.begin('ENTERING');\n        if (!transactionId) return;\n\n         this.$rootScope['isSignin'] = true;\n\n        if (this.hideObject.remember && !!rememberDefault) {\n            this.config.data.remember = true;\n        }\n\n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n\n        let session: AuthSessionData = new AuthSessionData();\n        this.pipRest.setHeaders({\n            'session-id': undefined,\n            'user-id': undefined,\n            'account-id': undefined\n        });\n\n        this.pipRest.getResource('signin').call({ \n            login: this.config.data.login,\n            password: this.config.data.password\n        },\n            (data: SessionData) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, false);\n                if (this.transaction.aborted(transactionId)) return;\n\n                this.pipEntry.openSession(data, this.config.data.remember);\n                if (this.checkEmailVerification(data)) {\n                    this.inSigninComplete(data);\n                    this.transaction.end();\n                } else {\n                    this.pipRest.getResource('email_settings').get(\n                        {\n                            user_id: data.user.id\n                        },\n                        (setting: EmailSettings) => {\n                            if (setting && setting.verified && setting.email == data.user.login) {\n                                this.inSigninComplete(data);\n                            } else {\n                                this.pipAuthState.go('verify_email', { email: data.user.login || data.user['email'], serverUrl: this.pipRest.serverUrl });\n                            }\n                            this.transaction.end();\n                        }, \n                        (error: any) => {\n                            this.$rootScope['isSignin'] = false;\n                            this.pipFormErrors.resetFormErrors(this.config.form, true);\n                            this.pipFormErrors.setFormError(this.config.form, error, {\n                                'WRONG_LOGIN': 'login', // Account was not found\n                                'NO_LOGIN': 'login', // Missing account login\n                                'LOGIN_NOT_FOUND': 'login', // Missing account login\n                                'WRONG_PASSWORD': 'password', // Missing password\n                                'ACCOUNT_LOCKED': 'form',\n                                'act_execute': 'form', // Unknown error\n                                '-1': 'form' // server not response\n                            });\n                            this.transaction.end({\n                                message: error\n                            });\n                        });\n                }\n                \n            },\n            (error: any) => {\n                this.$rootScope['isSignin'] = false;\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                this.pipFormErrors.setFormError(this.config.form, error, {\n                    'WRONG_LOGIN': 'login', // Account was not found\n                    'NO_LOGIN': 'login', // Missing account login\n                    'LOGIN_NOT_FOUND': 'login', // Missing account login\n                    'WRONG_PASSWORD': 'password', // Missing password\n                    'act_execute': 'form', // Unknown error\n                    '-1': 'form' // server not response\n                });\n                this.transaction.end({\n                    message: error\n                });\n            });\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport { EntryPageConfig } from '../common/EntryPageConfig';\nimport { IEntryCommonService } from '../common/IEntryCommonService';\nimport { SigninViewModel } from './SigninViewModel';\n\ninterface ISigninPanelController {\n    pipMedia: pip.layouts.IMediaService;\n\n    gotoSignup(): void;\n    onSignin(): void;\n    gotoRecoverPassword(): void;\n    onEnter(event): void;\n}\n\nclass SigninPanelController implements ISigninPanelController {\n    public gotoSignupDialog: Function;\n    public gotoRecoverPasswordDialog: Function;\n    public gotoSignupPage: any;\n    public rememberDefault: boolean;\n    public touchedErrorsWithHint: Function;\n\n    constructor(\n        private $scope: ng.IScope,\n        private $document: ng.IDocumentService,\n        private $timeout,\n        public pipMedia: pip.layouts.IMediaService,\n        private pipSigninViewModel: SigninViewModel,\n        private pipRest: pip.rest.IRestService,\n        private pipFormErrors: pip.errors.IFormErrorsService\n    ) {\n        \"ngInject\";\n\n        pipSigninViewModel.initModel($scope);\n        this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n    }\n\n    public $postLink() {\n        this.config.form = this.$scope.form;\n\n        this.$timeout(() => {\n            if (this.$document && this.$document[0]) {\n                var elem = angular.element(this.$document[0].querySelector('input[type=password]:-webkit-autofill'));\n\n                if (elem.length) {\n                    elem.parent().addClass('md-input-has-value');\n                }\n            }\n        }, 150);\n    }\n\n    public get config(): any {\n        return this.pipSigninViewModel.config;\n    }\n\n    public get transaction(): any {\n        return this.pipSigninViewModel.transaction;\n    }\n\n    public get showServerError(): any {\n        return this.pipSigninViewModel.showServerError;\n    }\n\n    public get hideObject(): any {\n        return this.pipSigninViewModel.hideObject;\n    }\n\n    public gotoSignup() {\n        this.pipSigninViewModel.gotoSignup(this.gotoSignupPage, this.gotoSignupDialog);\n    }\n\n    public onSignin() {\n        this.pipSigninViewModel.onSignin(this.rememberDefault);\n    }\n\n    public gotoRecoverPassword() {\n        this.pipSigninViewModel.gotoRecoverPassword(this.gotoRecoverPasswordDialog);\n    }\n\n    public onServerUrlChanged() {\n        this.config.onServerUrlChanged(this.config.form, this.config.selected.searchURLs);\n    }\n\n    public onChanged() {\n        this.pipFormErrors.resetFormErrors(this.config.form, false);\n        this.pipFormErrors.resetFieldsErrors(this.config.form, null);\n        this.pipRest.serverUrl = this.config.selected.searchURLs;\n        this.config.data.serverUrl = this.config.selected.searchURLs;\n    }\n\n    public onEnter(event): void {\n        if (event.keyCode === 13) {\n            this.onSignin();\n        }\n    }\n}\n\ninterface ISigninBindings {\n    [key: string]: any;\n\n    gotoSignupPage: any,\n    gotoSignupDialog: any,\n    gotoRecoverPasswordDialog: any,\n    rememberDefault: any, // set remember check\n}\n\nconst SigninBindings: ISigninBindings = {\n    gotoSignupPage: '=pipGotoSignupPage',\n    gotoSignupDialog: '=pipGotoSignupDialog',\n    gotoRecoverPasswordDialog: '=pipGotoRecoverPasswordDialog',\n    rememberDefault: '=pipRemember', // set remember check\n};\n\n\nclass SigninChanges implements ng.IOnChangesObject, ISigninBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n\n    gotoSignupPage: ng.IChangesObject<any>;\n    gotoSignupDialog: ng.IChangesObject<Function>;\n    gotoRecoverPasswordDialog: ng.IChangesObject<Function>;\n    rememberDefault: ng.IChangesObject<boolean>; // set remember check\n}\n\n{\n\n    const SigninPanel: ng.IComponentOptions = {\n        bindings: SigninBindings,\n        templateUrl: 'signin/SigninPanel.html',\n        controller: SigninPanelController\n    };\n\n\n    angular.module(\"pipSigninPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipSigninPanel', SigninPanel);\n\n}","import { SinginModel } from './SigninModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class SigninViewModel {\n    public model: SinginModel;\n\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipErrorPageConfigService: pip.errors.IErrorPageConfigService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipEntry: IEntryService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipNavService: pip.nav.INavService,\n        pipRest: pip.rest.IRestService\n    ) {\n        this.model = new SinginModel(\n            pipEntryCommon,\n            pipTransaction,\n            $rootScope,\n            $location,\n            $state,\n            $injector,\n            pipErrorPageConfigService,\n            pipAuthState,\n            pipEntry,\n            pipFormErrors,\n            pipNavService,\n            pipRest\n        );\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public gotoSignup(gotoSignupPage: any, gotoSignupDialog: any) {\n        this.model.gotoSignup(gotoSignupPage, gotoSignupDialog);\n    }\n\n    public gotoRecoverPassword(gotoRecoverPasswordDialog: any) {\n        this.model.gotoRecoverPassword(gotoRecoverPasswordDialog);\n    }\n\n    public onSignin(rememberDefault: boolean) {\n        this.model.onSignin(rememberDefault);\n    }\n}\n\nangular.module('pipEntry.Signin')\n    .service('pipSigninViewModel', SigninViewModel);","/// <reference path=\"../../typings/tsd.d.ts\" />\nimport { IEntryService } from '../common/EntryService';\n\n\nexport class SignoutController {\n\n    constructor(\n        pipAuthState: pip.rest.IAuthStateService,\n        pipEntry: IEntryService\n    ) {\n        \"ngInject\";\n\n       pipEntry.signout();\n        pipAuthState.goToUnauthorized({});\n    }\n}\n\nangular.module('pipEntry.Signout', []);\n\n\n\n\n\n","import { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryService } from \"../common/EntryService\";\n\n{\n    class SignupController {\n        constructor(\n            pipEntryCommon: IEntryCommonService,\n            pipEntry: IEntryService,\n            $state: ng.ui.IStateService,\n            pipAuthState: pip.rest.IAuthStateService\n        ) {\n            \"ngInject\";\n\n            pipEntryCommon.configureAppBar();\n\n            if (pipEntry.entryHideObject && pipEntry.entryHideObject.signup === true) {\n                $state.go(pipAuthState.signinState(), {});\n            }\n        }\n    }\n\n    const SignupConfig = ($stateProvider, pipAuthStateProvider) => {\n        $stateProvider\n            .state('signup', {\n                url: '/signup?name&login&server_url&redirect_to&language',\n                auth: false,\n                controller: SignupController,\n                controllerAs: '$ctrl',\n                templateUrl: 'signup/Signup.html'\n            })\n    }\n\n    angular\n        .module('pipEntry.Signup', [\n            'pipEntry.Common',\n            // 'pipEmailUnique',\n            'pipSignupPanel',\n            'pipPasswordMatch'\n        ])\n        .config(SignupConfig)\n}","import { IEntryService } from \"../common/EntryService\";\n\ninterface ISignupDialogService {\n    show(params: any, successCallback ? : () => void, cancelCallback ? : () => void): void;\n}\n\nclass SignupDialogService implements ISignupDialogService {\n\n    public constructor(private $mdDialog: angular.material.IDialogService) {}\n    public show(params: any, successCallback ? : () => void, cancelCallback ? : () => void) {\n        this.$mdDialog.show({\n                targetEvent: params.event,\n                templateUrl: 'signup/SignupDialog.html',\n                controller: SignupDialogController,\n                controllerAs: '$ctrl',\n                locals: {\n                    params: params\n                },\n                clickOutsideToClose: false\n            })\n            .then(() => {\n                if (successCallback) {\n                    successCallback();\n                }\n            }, () => {\n                if (cancelCallback) {\n                    cancelCallback();\n                }\n            });\n    }\n}\n\ninterface ISignupDialogController {\n    pipGotoSigninDialog: Function;\n    pipGotoPostSignupDialog: Function;\n}\n\nclass SignupDialogController implements ISignupDialogController {\n    public pipGotoSigninDialog: Function;\n    public pipGotoPostSignupDialog: Function;\n\n    constructor(\n        private pipSigninDialog,\n        private pipPostSignupDialog,\n        private pipEntry: IEntryService,\n    ) {\n        \"ngInject\";\n        \n        pipEntry.signout();\n        this.pipGotoSigninDialog = () => {\n            this.gotoSigninDialog();\n        }\n        this.pipGotoPostSignupDialog = (user) => {\n            this.gotoPostSignupDialog(user);\n        }\n    }\n\n    private gotoSigninDialog() {\n        this.pipSigninDialog.show({});\n    }\n\n    private gotoPostSignupDialog(user) {\n        this.pipPostSignupDialog.show({\n            $party: user\n        });\n    }\n}\n\n{\n\n    angular.module('pipEntry.SignupDialog', [\n            'pipEntry.Common',\n            \"pipSignupPanel\",\n            'pipEntry.SigninDialog',\n            'pipEntry.PostSignupDialog'\n        ])\n        .service('pipSignupDialog', SignupDialogService)\n}","import { EntryModel } from '../common/EntryModel';\nimport { IEntryService } from \"../common/EntryService\";\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { AuthSessionData } from '../common/EntryPageConfig';\nimport { SessionData } from '../data/SessionData';\nimport { EmailSettings } from '../data/EmailSettings';\n\nexport class SingupModel extends EntryModel {\n    private session: AuthSessionData;\n    private regestryVerifyEmailKey: string = 'verified_email';\n\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipRest: pip.rest.IRestService,\n        private pipEntry: IEntryService,\n        private pipEntryData: IEntryDataService,\n        private pipTranslate: pip.services.ITranslateService\n    ) {\n        \"ngInject\";\n\n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.signup');\n    }\n\n    public init($scope) {\n        this.initModel($scope);\n        this.setElementVisability();\n    }\n\n    private setElementVisability() {\n        this.hideObject.agreement = new Boolean(this.hideObject.agreement) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.passwordConfirm = new Boolean(this.hideObject.passwordConfirm) == true;\n        this.hideObject.signin = new Boolean(this.hideObject.signin) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    public gotoSignin(gotoSigninPage: any, gotoSigninDialog: any) {\n        if (!gotoSigninPage && !gotoSigninDialog) {\n            this.$state.go(this.pipAuthState.signinState(), {});\n            return;\n        }\n        if (gotoSigninPage) {\n            this.$state.go(gotoSigninPage);\n            return;\n        }\n        if (gotoSigninDialog) {\n            gotoSigninDialog();\n            return;\n        }\n    }\n\n    public onSignup(gotoPostSignup: any) {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n            return;\n        }\n        const transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n\n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n        // todo theme name take from parametr\n        this.pipRest.getResource('signup').call({\n            serverUrl: this.config.data.serverUrl,\n            name: this.config.data.name,\n            login: this.config.useEmailAsLogin ? this.config.data.email : this.config.data.login,\n            email: this.config.data.email,\n            password: this.config.data.password,\n            language: this.pipTranslate.language || 'en',\n            theme: 'default', // todo this.$rootScope['theme'] || 'blue' // pipTheme.theme || 'blue'\n            time_zone: null\n        },\n            (data: SessionData) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, false);\n                if (this.transaction.aborted(transactionId)) return;\n\n                this.pipEntry.openSession(data);\n                this.transaction.end();\n\n                /*this.pipSettingsData.saveSettingsKey(\n                    this.pipEntry.getUserId(data),\n                    this.regestryVerifyEmailKey,\n                    false);*/\n                    this.pipEntryData.saveSettingsKey(\n                        this.pipEntry.getUserId(data),\n                        this.regestryVerifyEmailKey,\n                        false);\n                \n\n                if (this.config.isPostSignup) {\n                    if (!gotoPostSignup) {\n                        this.pipAuthState.go('post_signup', {\n                            party_id: this.pipEntry.getUserId(data)\n                        });\n                    } else {\n                        gotoPostSignup(data);\n                    }\n                } else {\n                    this.pipRest.getResource('email_settings').get(\n                        {\n                            user_id: data.user.id\n                        },\n                        (setting: EmailSettings) => {\n                            if (setting && setting.verified && setting.email == data.user.login) {\n                                this.pipAuthState.goToAuthorized({});\n                            } else {\n                                this.pipAuthState.go('verify_email', {\n                                    email: data.user.login || data.user['email'], serverUrl: this.pipRest.serverUrl \n                                });\n                            }\n                            this.transaction.end();\n                        }, \n                        (error: any) => {\n                            this.pipFormErrors.resetFormErrors(this.config.form, true);\n                            this.pipFormErrors.setFormError(\n                                this.config.form, error, {\n                                    'WRONG_LOGIN': 'signupLogin', // Account was not found\n                                    'NO_LOGIN': 'signupLogin', // Missing account login\n                                    'ALREADY_EXIST': 'signupLogin', // account is already exist\n                                    'WRONG_PASSWORD': 'password', // Missing password\n                                    'NO_EMAIL': 'userEmail',\n                                    'NO_NAME': 'signupFullName',\n                                    'act_execute': 'form', // Unknown error\n                                    '-1': 'form' // server not response\n                                }\n                            );\n                            this.transaction.end(error);\n                        });\n\n\n                }\n            },\n            (error: any) => {\n                // todo error by login\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                this.pipFormErrors.setFormError(\n                    this.config.form, error, {\n                        'WRONG_LOGIN': 'signupLogin', // Account was not found\n                        'NO_LOGIN': 'signupLogin', // Missing account login\n                        'ALREADY_EXIST': 'signupLogin', // account is already exist\n                        'WRONG_PASSWORD': 'password', // Missing password\n                        'NO_EMAIL': 'userEmail',\n                        'NO_NAME': 'signupFullName',\n                        'act_execute': 'form', // Unknown error\n                        '-1': 'form' // server not response\n                    }\n                );\n                this.transaction.end(error);\n            }\n        );\n    };\n}","import { EntryPageConfig } from '../common/EntryPageConfig';\nimport { IEntryCommonService } from '../common/IEntryCommonService';\nimport { SignupViewModel } from './SignupViewModel';\nimport { IEntryDataService } from '../data/IEntryDataService';\n\n{\n    class SignupPanelController {\n        public gotoSigninPage: any;\n        public gotoSigninDialog: any;\n        public gotoPostSignup: any;\n        public touchedErrorsWithHint: Function;\n        public isQuery: boolean = false;\n        public error: string;\n\n        constructor(\n            private $scope: ng.IScope,\n            public pipMedia: pip.layouts.IMediaService,\n            public pipFormErrors: pip.errors.IFormErrorsService,\n            public pipEntryData: IEntryDataService,\n            private pipRest: pip.rest.IRestService,\n            private pipSignupViewModel: SignupViewModel\n        ) {\n            \"ngInject\";\n\n            this.pipSignupViewModel.initModel(this.$scope);\n            this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n        }\n\n        public $postLink() {\n            this.config.form = this.$scope.form;\n        }\n\n        public get config(): any {\n            return this.pipSignupViewModel.config;\n        }\n\n        public get transaction(): any {\n            return this.pipSignupViewModel.transaction;\n        }\n\n        public get showServerError(): any {\n            return this.pipSignupViewModel.showServerError;\n        }\n\n        public get hideObject(): any {\n            return this.pipSignupViewModel.hideObject;\n        }\n\n        public gotoSignin() {\n            this.pipSignupViewModel.gotoSignin(this.gotoSigninPage, this.gotoSigninDialog);\n        }\n\n        public onSignup() {\n            this.pipSignupViewModel.onSignup(this.gotoPostSignup);\n        }\n\n        public onEnter(event: any) {\n            if (event.keyCode === 13) {\n                this.onSignup();\n            }\n        }\n\n        public onChangeEmail(field: string) {\n            if (!this.config.data.email) { return }\n            if (this.isQuery) return;\n            this.error = null;\n            \n            this.isQuery = true;\n            this.pipEntryData.signupValidate(this.config.data.email,\n                (data) => {\n                    if (this.config.form && this.config.form[field]) {\n                        this.config.form[field].$setValidity('emailUnique', true);\n                    }\n                    this.isQuery = false;\n                },\n                (err) => {\n                    if (err && err.status == 400 && err.data && err.data.code == 'LOGIN_ALREADY_USED') {\n                        if (this.config.form && this.config.form[field]) {\n                            this.config.form[field].$setValidity('emailUnique', false);\n                        }\n                    } else {\n                        let code: string = err.code || (err.data || {}).code || null;\n                        if (!code && err.status) code = err.status;\n\n                        if (code == '-1') {\n                            this.error = 'ERROR_' + code;\n\n\n                        } else {\n                            // if undefined error for this form or code === undefined/null, go to unhandled error page\n                            if (err.data && err.data.message) {\n                                this.error = err.data.message;\n                            } else if (err.message) {\n                                this.error = err.message;\n                            } else if (err.name) {\n                                this.error = err.name;\n                            } else this.error = err;\n                        }\n                    }\n\n                    this.isQuery = false;\n                });\n        }\n\n        public onServerUrlChanged() {\n            this.error = null;\n            this.config.onServerUrlChanged(this.config.form, this.config.selected.searchURLs);\n        }\n    \n        public onChanged() {\n            this.pipFormErrors.resetFormErrors(this.config.form, false);\n            this.pipFormErrors.resetFieldsErrors(this.config.form, null);\n            this.pipRest.serverUrl = this.config.selected.searchURLs;\n            this.config.data.serverUrl = this.config.selected.searchURLs;\n        }\n        public isError(error: any): boolean {\n            return error.required || error.email || error.emailUnique || error.ERROR_WRONG_LOGIN || error.ERROR_NO_LOGIN\n        }\n    }\n\n    interface ISignupPanelBindings {\n        [key: string]: any;\n\n        gotoPostSignup: any;\n        gotoSigninPage: any;\n        gotoSigninDialog: any;\n    }\n\n    const SignupPanelBindings: ISignupPanelBindings = {\n        gotoPostSignup: '=pipPostSignup',\n        gotoSigninPage: '=pipGotoSigninPage',\n        gotoSigninDialog: '=pipGotoSigninDialog',\n    }\n\n    class SignupPanelBindingsChanges implements ng.IOnChangesObject, ISignupPanelBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        gotoPostSignup: ng.IChangesObject<boolean>;\n        gotoSigninPage: ng.IChangesObject<Function>;\n        gotoSigninDialog: ng.IChangesObject<boolean>;\n    }\n\n    const SignupPanel: ng.IComponentOptions = {\n        bindings: SignupPanelBindings,\n        controller: SignupPanelController,\n        templateUrl: 'signup/SignupPanel.html'\n    }\n\n    angular.module(\"pipSignupPanel\", ['pipFocused', 'pipEntry.Strings'])\n        .component('pipSignupPanel', SignupPanel);\n}","import { SingupModel } from './SignupModel';\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class SignupViewModel {\n    public model: SingupModel;\n\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        pipEntry: IEntryService,\n        pipEntryData: IEntryDataService,\n        pipTranslate: pip.services.ITranslateService\n    ) {\n        \"ngInject\";\n\n        this.model = new SingupModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state, $injector,\n            pipAuthState, pipFormErrors, pipRest, pipEntry, pipEntryData, pipTranslate);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public gotoSignin(gotoSigninPage: any, gotoSigninDialog: any) {\n        this.model.gotoSignin(gotoSigninPage, gotoSigninDialog);  \n    }\n\n    public onSignup(gotoPostSignup: any) {\n        this.model.onSignup(gotoPostSignup);\n    }\n}\n\nangular.module('pipEntry.Signup')\n    .service('pipSignupViewModel', SignupViewModel);","import { IEntryCommonService } from '../common/IEntryCommonService';\nimport { VerifyEmailViewModel } from './VerifyEmailViewModel';\nimport { EntryPageConfig } from '../common/EntryPageConfig';\n\nexport class VerifyEmailController {\n    public showServerError: boolean;\n    public touchedErrorsWithHint: Function;\n    public form: any;\n    public data: any;\n    public error: any;\n    public serverUrl: string;\n    public email: string;\n    public showValidateProgress: boolean;\n\n    constructor(\n        private $scope: ng.IScope,\n        private $window: ng.IWindowService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipVerifyEmailViewModel: VerifyEmailViewModel,\n        private pipIdentity: pip.services.IIdentityService,\n        private $timeout: ng.ITimeoutService\n    ) {\n        \"ngInject\";\n\n        pipVerifyEmailViewModel.initModel(this.$scope);\n        this.touchedErrorsWithHint = pipFormErrors.touchedErrorsWithHint;\n\n        // postlink hak\n        $timeout(() => {\n            this.config.form = this.$scope.form;\n            if (this.config.data.code && this.config.data.email) {\n                this.showValidateProgress = true;\n                this.pipVerifyEmailViewModel.onVerify(\n                    (data: any) => {\n                        this.pipVerifyEmailViewModel.onContinue();\n                    },\n                    (error: any) => {\n                        this.showValidateProgress = false;\n                    }\n                );\n            } else {\n                this.showValidateProgress = false;\n            }\n        }, 0)\n    }\n\n    public goBack(): void {\n        // this.$window.history.back();\n        this.pipVerifyEmailViewModel.onCancel();\n    }\n\n    public get config(): EntryPageConfig {\n        return this.pipVerifyEmailViewModel.config;\n    }\n\n    public get transaction(): any {\n        return this.pipVerifyEmailViewModel.transaction;\n    }\n\n    public onVerify() {\n        this.pipVerifyEmailViewModel.onVerify();\n    }\n\n    public onRecover() {\n        this.pipVerifyEmailViewModel.onRecover();\n    }\n}\n\nexport class VerifyEmailSuccessController {\n    constructor(\n        $scope: ng.IScope,\n        private pipVerifyEmailViewModel: VerifyEmailViewModel\n    ) {\n        pipVerifyEmailViewModel.initModel($scope);\n    }\n\n    public onContinue() {\n        this.pipVerifyEmailViewModel.onContinue();\n    }\n}\n\nangular.module('pipEntry.VerifyEmail', []);","import { EntryModel } from '../common/EntryModel';\nimport { IEntryCommonService } from \"../common/IEntryCommonService\";\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class VerifyEmailModel extends EntryModel {\n    private regestryVerifyEmailKey: string = 'verified_email';\n\n    constructor(\n        pipEntryCommon: IEntryCommonService,\n        pipTransaction: pip.services.ITransactionService,\n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $state: ng.ui.IStateService,\n        private $injector: ng.auto.IInjectorService,\n        private pipAuthState: pip.rest.IAuthStateService,\n        private pipFormErrors: pip.errors.IFormErrorsService,\n        private pipRest: pip.rest.IRestService,\n        private pipEntryData: IEntryDataService,\n        private pipIdentity: pip.services.IIdentityService,\n        private pipEntry: IEntryService\n    ) {\n        \"ngInject\";\n\n        super(pipEntryCommon);\n        this.transaction = pipTransaction.create('entry.verify_email');\n    }\n\n    public init($scope) {\n        this.initModel($scope);\n        this.setElementVisability();\n        this.pipEntryCommon.configureAppBar();\n    }\n\n    private setElementVisability() {\n        this.hideObject.remember = new Boolean(this.hideObject.remember) == true;\n        this.hideObject.title = new Boolean(this.hideObject.title) == true;\n        this.hideObject.server = new Boolean(this.hideObject.server) == true;\n        this.hideObject.forgotPassword = new Boolean(this.hideObject.forgotPassword) == true;\n        this.hideObject.signup = new Boolean(this.hideObject.signup) == true;\n        this.hideObject.hint = new Boolean(this.hideObject.hint) == true;\n        this.hideObject.progress = new Boolean(this.hideObject.progress) == true;\n    }\n\n    public onVerify(successCallback?: (data: any) => void, errorCallback?: (error: any) => void) {\n        if (this.config.form.$invalid) {\n            this.pipFormErrors.resetFormErrors(this.config.form, true);\n            return;\n        }\n\n        var transactionId = this.transaction.begin('PROCESSING');\n        if (!transactionId) return;\n\n        if (!this.pipRest.lockServerUrl) {\n            this.pipRest.serverUrl = this.config.data.serverUrl;\n        }\n\n        this.pipEntryData.verifyEmail({\n            login: this.config.data.login,\n            email: this.config.data.email || this.config.data.login,\n            code: this.config.data.code\n        },\n            (data) => {\n                this.pipFormErrors.resetFormErrors(this.config.form, false);\n                if (this.transaction.aborted(transactionId)) return;\n\n                let userId = this.pipEntryData.getUserId();\n                if (successCallback) successCallback(data);\n\n                this.transaction.end();\n                this.pipEntryData.saveSettingsKey(\n                    userId,\n                    this.regestryVerifyEmailKey,\n                    true,\n                    (data) => {\n                        let identity: any = this.pipIdentity.identity;\n                        if (identity && identity.user) {\n                            if (!identity.user.settings) identity.user.settings = {};\n\n                            identity.user.settings[this.regestryVerifyEmailKey] = \"true\";\n                            this.pipIdentity.identity = identity;\n                        }\n                        this.onContinue();\n                    },\n                (error: any) => {\n                    this.transaction.end(error)\n                });\n\n            },\n            (error) => {\n                this.transaction.end(error);\n                this.pipFormErrors.resetFormErrors(this.config.form, true);\n                this.pipFormErrors.setFormError(\n                    this.config.form, error, {\n                        'WRONG_LOGIN_EMAIL': 'login', // Account was not found\n                        'NO_LOGIN_EMAIL': 'login', // Missing account login\n                        'NO_EMAIL': 'login', // Missing account login\n                        'INVALID_CODE': 'code', // Invalid password recovery code\n                        'act_execute': 'form', // Unknown error\n                        '-1': 'form' // server not response\n                    }\n                );\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    public onRecover() {\n        if (!this.config.data.login) {\n\n            return;\n        }\n\n        const tid = this.transaction.begin('PROCESSING');\n        if (!tid) return;\n\n        this.pipEntryData.requestEmailVerification({\n            login: this.config.data.login\n        },\n            (data) => {\n                if (this.transaction.aborted(tid)) return;\n                this.config.data.code = null\n                this.transaction.end();\n            },\n            (error) => {\n                this.transaction.end(error);\n            }\n        );\n    }\n// todo \n    public onContinue() {\n        if (this.pipAuthState.params.redirect_to) {\n            this.$location.url(this.pipAuthState.params.redirect_to);\n        } else {\n            this.pipAuthState.goToAuthorized(this.config && this.config.data ? this.config.data : {});\n        }\n    }\n\n    public onCancel() {\n        this.pipEntry.signout();\n        this.pipAuthState.goToUnauthorized({});\n    }\n}","(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('change_password/ChangePassword.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-change-password-panel class=\"scroll-y\"></pip-change-password-panel><div class=\"pip-footer\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onChange()\" aria-label=\"ENTRY_CHANGE_PASSWORD\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0 || $ctrl.config.data.code.length == 0 || $ctrl.config.data.password.length < 6\" class=\"md-accent\" type=\"submit\">{{ ::\\'ENTRY_CHANGE_PASSWORD\\' | translate }}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></div></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('change_password/ChangePasswordDialog.html',\n    '<md-dialog class=\"pip-entry lp0 rp0\"><md-dialog-content><pip-change-password-panel></pip-change-password-panel></md-dialog-content><md-dialog-actions class=\"layout-row layout-align-end-center\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onChange()\" aria-label=\"ENTRY_CHANGE_PASSWORD\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0 || $ctrl.config.data.code.length == 0 || $ctrl.config.data.password.length < 6\" class=\"md-accent\" type=\"submit\">{{ ::\\'ENTRY_CHANGE_PASSWORD\\' | translate }}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('change_password/ChangePasswordPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && $ctrl.showServerError && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 ng-if=\"!$ctrl.hideObject.changePwdTitle\">{{::\\'CHANGE_PWD_PASSWORD\\' | translate}}</h2><p class=\"title-padding bm16\" ng-if=\"!$ctrl.hideObject.changePwdSubTitle\">{{::\\'CHANGE_PWD_TEXT\\' | translate}}</p><form name=\"form\" novalidate=\"\" autocomplete=\"off\"><input name=\"password\" style=\"display:none\"> <input name=\"passwordNew\" style=\"display:none\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\"><div ng-message=\"ERROR_act_execute\">{{ ::\\'ERROR_ACT_EXECUTE\\' | translate }}</div><div ng-message=\"ERROR_-1\">{{ ::\\'ERROR_SERVER\\' | translate }}</div><div ng-message=\"ERROR_UNKNOWN\">{{ \\'ERROR_UNKNOWN\\' | translate }}</div></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"bp8\"><md-autocomplete ng-initial=\"\" autofocus=\"\" tabindex=\"1\" class=\"pip-combobox w-stretch bm8\" name=\"server\" ng-enabled=\"!$ctrl.transaction.busy()\" placeholder=\"{{::\\'ENTRY_SERVER_URL\\' | translate}}\" md-no-cache=\"true\" md-selected-item=\"$ctrl.config.data.serverUrl\" md-search-text=\"$ctrl.config.selected.searchURLs\" md-items=\"item in $ctrl.config.getMatches($ctrl.config.selected.searchURLs)\" md-item-text=\"item\" md-selected-item-change=\"$ctrl.onServerUrlChanged()\" md-search-text-change=\"$ctrl.onChanged()\" md-delay=\"200\" ng-model=\"$ctrl.config.data.serverUrl\" pip-clear-errors=\"\"><span md-highlight-text=\"$ctrl.config.selected.searchURLs\">{{ item }}</span></md-autocomplete></div><md-input-container class=\"pip-no-hint\" style=\"padding-bottom: 4px!important;\"><label>{{::\\'OLD_PASSWORD\\' | translate}}</label> <input name=\"password\" ng-disabled=\"$ctrl.transaction.busy()\" xxxpip-clear-errors=\"\" type=\"password\" tabindex=\"4\" ng-model=\"$ctrl.config.data.password\" required=\"\" minlength=\"6\" ng-change=\"$ctrl.onChangePassword()\" pip-compare-old-password=\"\" compare-to=\"$ctrl.config.data.passwordNew\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password, true)\" class=\"md-input-error\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'MINLENGTH_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'MINLENGTH_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_compareTo\">{{::\\'PASSWORD_IDENTICAL\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\"><label>{{::\\'NEW_PASSWORD_SET\\' | translate}}</label> <input name=\"passwordNew\" ng-disabled=\"$ctrl.transaction.busy()\" xxxpip-clear-errors=\"\" type=\"password\" tabindex=\"4\" ng-model=\"$ctrl.config.data.passwordNew\" ng-change=\"$ctrl.onChangePasswordNew()\" required=\"\" minlength=\"6\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\" autocomplete=\"off\" pip-compare-new-password=\"\" compare-to1=\"$ctrl.config.data.password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordNew, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordNew, true)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_compareTo\">{{::\\'PASSWORD_IDENTICAL\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\" xxxng-if=\"!$ctrl.config.form.passwordNew.$pristine\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\" ng-if=\"!$ctrl.hideObject.passwordConfirm\"><label>{{::\\'NEW_PASSWORD_CONFIRM\\' | translate}}</label> <input name=\"passwordConfirm\" type=\"password\" tabindex=\"4\" required=\"\" minlength=\"6\" ng-model=\"$ctrl.confirmPassword\" ng-disabled=\"$ctrl.transaction.busy()\" xxpip-clear-errors=\"\" ng-change=\"$ctrl.onChangePasswordConfirm()\" pip-compare-password-match=\"\" compare-to2=\"$ctrl.config.data.passwordNew\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordConfirm, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordConfirm, true)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_compareTo\">{{::\\'PASSWORD_MATCH\\' | translate}}</div></div></md-input-container></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('expire_change_password/ExpireChangePassword.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-expire-change-password-panel class=\"scroll-y\"></pip-expire-change-password-panel><div class=\"pip-footer\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onChange()\" aria-label=\"ENTRY_EXPIRE_CHANGE_PASSWORD\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0 || $ctrl.config.data.code.length == 0 || $ctrl.config.data.password.length < 6\" class=\"md-accent\" type=\"submit\">{{ ::\\'ENTRY_EXPIRE_CHANGE_PASSWORD\\' | translate }}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></div></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('expire_change_password/ExpireChangePasswordDialog.html',\n    '<md-dialog class=\"pip-entry lp0 rp0\"><md-dialog-content><pip-expire-change-password-panel></pip-expire-change-password-panel></md-dialog-content><md-dialog-actions class=\"layout-row layout-align-end-center\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onChange()\" aria-label=\"ENTRY_EXPIRE_CHANGE_PASSWORD\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0 || $ctrl.config.data.code.length == 0 || $ctrl.config.data.password.length < 6\" class=\"md-accent\" type=\"submit\">{{ ::\\'ENTRY_EXPIRE_CHANGE_PASSWORD\\' | translate }}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('expire_change_password/ExpireChangePasswordPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && $ctrl.showServerError && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 ng-if=\"!$ctrl.hideObject.changePwdTitle\">{{::\\'EXPIRE_CHANGE_PWD_PASSWORD\\' | translate}}</h2><p class=\"title-padding bm16\" ng-if=\"!$ctrl.hideObject.changePwdSubTitle\">{{::\\'EXPIRE_CHANGE_PWD_TEXT\\' | translate}}</p><form name=\"form\" novalidate=\"\" autocomplete=\"off\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\"><div ng-message=\"ERROR_act_execute\">{{::\\'ERROR_ACT_EXECUTE\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div class=\"bp16\"><a ng-hide=\"$ctrl.config.showServerUrl || $ctrl.config.fixedServerUrl || $ctrl.hideObject.server\" ng-click=\"$ctrl.config.showServerUrl = true\" href=\"\">{{::\\'ENTRY_CHANGE_SERVER\\' | translate}}</a></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"bp8\"><md-autocomplete ng-initial=\"\" autofocus=\"\" tabindex=\"1\" class=\"pip-combobox w-stretch bm8\" name=\"server\" ng-enabled=\"!$ctrl.transaction.busy()\" placeholder=\"{{::\\'ENTRY_SERVER_URL\\' | translate}}\" md-no-cache=\"true\" md-selected-item=\"$ctrl.config.data.serverUrl\" md-search-text=\"$ctrl.config.selected.searchURLs\" md-items=\"item in $ctrl.config.getMatches($ctrl.config.selected.searchURLs)\" md-item-text=\"item\" md-selected-item-change=\"$ctrl.onServerUrlChanged()\" md-search-text-change=\"$ctrl.onChanged()\" md-delay=\"200\" ng-model=\"$ctrl.config.data.serverUrl\" pip-clear-errors=\"\"><span md-highlight-text=\"$ctrl.config.selected.searchURLs\">{{ item }}</span></md-autocomplete></div><md-input-container class=\"pip-no-hint\" style=\"padding-bottom: 4px!important;\"><label>{{::\\'OLD_PASSWORD\\' | translate}}</label> <input name=\"password\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" type=\"password\" tabindex=\"4\" ng-model=\"$ctrl.config.data.password\" required=\"\" minlength=\"6\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password)\" class=\"md-input-error\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'MINLENGTH_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'MINLENGTH_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\"><label>{{::\\'NEW_PASSWORD_SET\\' | translate}}</label> <input name=\"passwordNew\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" type=\"password\" tabindex=\"4\" ng-model=\"$ctrl.config.data.passwordNew\" required=\"\" minlength=\"6\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordNew).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordNew)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\" xxxng-if=\"!$ctrl.config.form.passwordNew.$pristine\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\" ng-if=\"!$ctrl.hideObject.passwordConfirm\"><label>{{::\\'NEW_PASSWORD_CONFIRM\\' | translate}}</label> <input name=\"passwordConfirm\" type=\"password\" tabindex=\"4\" required=\"\" minlength=\"6\" ng-model=\"$ctrl.confirmPassword\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" pip-compare-password-match=\"\" compare-to2=\"$ctrl.config.data.passwordNew\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordConfirm, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordConfirm, true)\" md-auto-hide=\"false\"><div ng-message=\"ERROR_compareTo\">{{::\\'PASSWORD_MATCH\\' | translate}}</div><div ng-message=\"required\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div></div></md-input-container></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('post_signup/PostSignup.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-post-signup-panel pip-party=\"$ctrl.$party\"></pip-post-signup-panel><div class=\"pip-footer\"><md-button ng-hide=\"$ctrl.transaction.busy()\" class=\"md-accent\" type=\"submit\" ng-click=\"$ctrl.onPostSignupSubmit()\" aria-label=\"CONTINUE\">{{ ::\\'CONTINUE\\' | translate }}</md-button><md-button ng-show=\"$ctrl.transaction.busy()\" class=\"md-warn\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></div></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('post_signup/PostSignupDialog.html',\n    '<md-dialog class=\"pip-entry lp0 rp0\"><md-dialog-content><pip-post-signup-panel pip-party=\"$ctrl.$party\"></pip-post-signup-panel></md-dialog-content><md-dialog-actions class=\"layout-row layout-align-end-center\"><md-button ng-hide=\"$ctrl.transaction.busy()\" class=\"md-accent\" ng-click=\"$ctrl.onPostSignupSubmit()\" aria-label=\"CONTINUE\">{{ ::\\'CONTINUE\\' | translate }}</md-button><md-button ng-show=\"$ctrl.transaction.busy()\" class=\"md-warn\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('post_signup/PostSignupPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 class=\"text-overflow\" ng-if=\"!$ctrl.hideObject.title\">{{ \\'POST_SIGNUP_TITLE\\' | translate }}</h2><p class=\"bm0 line-height-string\" ng-if=\"!$ctrl.hideObject.successTitle\">{{ \\'POST_SIGNUP_TEXT_1\\' | translate }}</p><p class=\"line-height-string m0\" ng-if=\"!$ctrl.hideObject.subTitle\">{{ \\'POST_SIGNUP_TEXT_2\\' | translate }}</p><form name=\"form\" novalidate=\"\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8\" md-auto-hide=\"false\"><div ng-message=\"ERROR_1000\">{{::\\'ERROR_1000\\' | translate}}</div><div ng-message=\"ERROR_1110\">{{::\\'ERROR_1110\\' | translate}}</div><div ng-message=\"ERROR_1111\">{{::\\'ERROR_1111\\' | translate}}</div><div ng-message=\"ERROR_1112\">{{::\\'ERROR_1112\\' | translate}}</div><div ng-message=\"ERROR_1002\">{{::\\'ERROR_1002\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div class=\"pip-ref-item\"><pip-avatar-edit ng-disabled=\"$ctrl.transaction.busy()\" ng-if=\"$ctrl.config.enableAvatar\" pip-reset=\"false\" pip-party-id=\"$ctrl.config.data.id\" pip-created=\"$ctrl.onPictureCreated($event)\" pip-changed=\"$ctrl.onPictureChanged($control, $event)\" class=\"rm16 flex-fixed\"></pip-avatar-edit><div class=\"pip-content\"><p class=\"pip-title\">{{ $ctrl.config.data.name }}</p><p class=\"pip-subtitle\">{{ $ctrl.config.data.email }}</p></div></div><md-input-container class=\"pip-no-hint bp4\"><label>{{ \\'HINT_ABOUT\\' | translate }}</label> <textarea ng-model=\"$ctrl.config.data.about\" ng-initial=\"\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\">\\n' +\n    '                        </textarea></md-input-container><div class=\"tm2\"><p class=\"text-caption bm0\">{{ \\'GENDER\\' | translate }}</p><md-select class=\"w-stretch tm0 tp0 bp8\" ng-disabled=\"$ctrl.transaction.busy()\" ng-model=\"$ctrl.config.data.gender\" label=\"{{\\'GENDER\\' | translate}}\" ng-change=\"$ctrl.onStatusChange($ctrl.config.data)\" pip-clear-errors=\"\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.genders track by opt.id\">{{ opt.name }}</md-option></md-select></div><div class=\"tm2\"><p class=\"text-caption bm0\">{{ ::\\'BIRTHDAY\\' | translate }}</p><pip-date ng-disabled=\"$ctrl.transaction.busy()\" ng-model=\"$ctrl.config.data.birthday\" pip-time-mode=\"past\" pip-clear-errors=\"\" time-mode=\"past\"></pip-date></div><md-input-container><label>{{ ::\\'LANGUAGE\\' | translate }}</label><md-select class=\"w-stretch tm0 tp0 bp16\" ng-disabled=\"$ctrl.transaction.busy()\" ng-model=\"$ctrl.config.data.language\" ng-change=\"$ctrl.onStatusChange($ctrl.config.data)\" pip-clear-errors=\"\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.languages track by opt.id\">{{ opt.name }}</md-option></md-select></md-input-container></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('recover_password/RecoverPassword.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-recover-password-panel class=\"scroll-y\"></pip-recover-password-panel><div class=\"pip-footer\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" class=\"md-accent\" ng-click=\"$ctrl.onRecover()\" aria-label=\"RECOVER_PWD_RECOVER\" type=\"submit\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0\">{{ ::\\'RECOVER_PWD_RECOVER\\' | translate }}</md-button><md-button ng-show=\"$ctrl.transaction.busy()\" class=\"md-warn\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></div></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('recover_password/RecoverPasswordDialog.html',\n    '<md-dialog class=\"pip-entry lp0 rp0\"><md-dialog-content><pip-recover-password-panel></pip-recover-password-panel></md-dialog-content><md-dialog-actions class=\"layout-row layout-align-end-center\"><md-button ng-hide=\"$ctlr.transaction.busy()\" ng-click=\"$ctlr.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{::\\'CANCEL\\' | translate}}</md-button><md-button ng-hide=\"$ctlr.transaction.busy()\" class=\"md-accent\" ng-click=\"$ctlr.onRecover()\" aria-label=\"RECOVER_PWD_RECOVER\" ng-disabled=\"($$ctlr.config.form.$pristine && !$ctlr.config.data.login) || $ctlr.config.data.login== undefined || || $ctlr.config.data.serverUrl.length == 0 || $ctlr.config.data.login.length == 0\">{{::\\'RECOVER_PWD_RECOVER\\' | translate}}</md-button><md-button ng-show=\"$ctlr.transaction.busy()\" class=\"md-warn\" ng-click=\"$ctlr.transaction.abort()\" aria-label=\"ABORT\">{{::\\'CANCEL\\' | translate}}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('recover_password/RecoverPasswordPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 ng-if=\"!$ctrl.hideObject.title\">{{ \\'RECOVER_PWD_TITLE\\' | translate }}</h2><p class=\"text-primary tm0 bm16\" ng-if=\"!$ctrl.hideObject.subTitle1 && !$ctrl.config.useEmailAsLogin\">{{ \\'RECOVER_PWD_TEXT_1_LOGIN\\' | translate }}</p><p class=\"text-primary tm0 bm16\" ng-if=\"!$ctrl.hideObject.subTitle1 && $ctrl.config.useEmailAsLogin\">{{ \\'RECOVER_PWD_TEXT_1_EMAIL\\' | translate }}</p><p class=\"text-primary tm0 bm16\" ng-if=\"!$ctrl.hideObject.subTitle2\">{{ \\'RECOVER_PWD_TEXT_2\\' | translate }}</p><form name=\"form\" novalidate=\"\" autocomplete=\"off\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\"><div ng-message=\"ERROR_act_execute\">{{::\\'ERROR_ACT_EXECUTE\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div class=\"bp16\"><a ng-hide=\"$ctrl.config.showServerUrl || $ctrl.config.fixedServerUrl || $ctrl.hideObject.server\" ng-click=\"$ctrl.config.showServerUrl = true\" href=\"\">{{ ::\\'ENTRY_CHANGE_SERVER\\' | translate }}</a></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"bp8\"><md-autocomplete ng-initial=\"\" autofocus=\"\" tabindex=\"1\" class=\"pip-combobox w-stretch bm8\" name=\"server\" aria-label=\"URL\" ng-enabled=\"!$ctrl.transaction.busy()\" placeholder=\"{{::\\'ENTRY_SERVER_URL\\' | translate}}\" md-no-cache=\"true\" md-selected-item=\"$ctrl.config.data.serverUrl\" md-search-text=\"$ctrl.config.selected.searchURLs\" md-items=\"item in $ctrl.config.getMatches($ctrl.config.selected.searchURLs)\" md-item-text=\"item\" md-selected-item-change=\"$ctrl.onServerUrlChanged()\" md-search-text-change=\"$ctrl.onChanged()\" md-delay=\"200\" ng-model=\"$ctrl.config.data.serverUrl\" pip-clear-errors=\"\"><span md-highlight-text=\"$ctrl.config.selected.searchURLs\">{{ item }}</span></md-autocomplete></div><md-input-container class=\"pip-no-hint\" style=\"padding-bottom: 4px!important;\"><label ng-if=\"!$ctrl.config.useEmailAsLogin\">{{::\\'LOGIN\\' | translate}}</label> <label ng-if=\"$ctrl.config.useEmailAsLogin\">{{::\\'EMAIL\\' | translate}}</label> <input name=\"login\" type=\"text\" aria-label=\"LOGIN\" ng-model=\"$ctrl.config.data.login\" required=\"\" step=\"any\" pip-clear-errors=\"\" ng-disabled=\"$ctrl.transaction.busy()\" tabindex=\"2\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login).hint && !$ctrl.hideObject.hint && !$ctrl.config.useEmailAsLogin\">{{::\\'HINT_LOGIN\\' | translate}}</div><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login).hint && !$ctrl.hideObject.hint && $ctrl.config.useEmailAsLogin\">{{::\\'HINT_EMAIL\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login)\" class=\"md-input-error\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'ERROR_LOGIN_INVALID\\' | translate }}</div><div ng-message=\"ERROR_WRONG_LOGIN\">{{::\\'ERROR_WRONG_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_NO_LOGIN\">{{::\\'ERROR_NO_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_LOGIN_NOT_FOUND\">{{::\\'ERROR_LOGIN_NOT_FOUND\\' | translate}}</div></div></md-input-container></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('reset_password/ResetPassword.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-reset-password-panel class=\"scroll-y\"></pip-reset-password-panel><div class=\"pip-footer\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.goBack()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onReset()\" aria-label=\"ENTRY_RESET_PASSWORD\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0 || $ctrl.config.data.resetCode.length == 0 || $ctrl.config.data.password.length < 6\" class=\"md-accent\" type=\"submit\">{{ ::\\'ENTRY_RESET_PASSWORD\\' | translate }}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></div></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('reset_password/ResetPasswordDialog.html',\n    '<md-dialog class=\"pip-entry lp0 rp0\"><md-dialog-content><pip-reset-password-panel></pip-reset-password-panel></md-dialog-content><md-dialog-actions class=\"layout-row layout-align-end-center\"><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onCancel()\" class=\"rm8\" aria-label=\"CANCEL\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button ng-hide=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.onReset()\" aria-label=\"ENTRY_RESET_PASSWORD\" ng-disabled=\"($ctrl.config.form.$pristine && !$ctrl.config.data.login) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.login.length == 0 || $ctrl.config.data.resetCode.length == 0 || $ctrl.config.data.password.length < 6\" class=\"md-accent\" type=\"submit\">{{ ::\\'ENTRY_RESET_PASSWORD\\' | translate }}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{ ::\\'CANCEL\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('reset_password/ResetPasswordPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && $ctrl.showServerError && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 ng-if=\"!$ctrl.hideObject.title\">{{::\\'RESET_PWD_PASSWORD\\' | translate}}</h2><p class=\"title-padding bm16\" ng-if=\"!$ctrl.hideObject.resetSubTitle && !$ctrl.config.useEmailAsLogin\">{{::\\'RESET_PWD_TEXT_LOGIN\\' | translate}}</p><p class=\"title-padding bm16\" ng-if=\"!$ctrl.hideObject.resetSubTitle && $ctrl.config.useEmailAsLogin\">{{::\\'RESET_PWD_TEXT_EMAIL\\' | translate}}</p><form name=\"form\" novalidate=\"\" autocomplete=\"off\"><input name=\"code\" style=\"display:none\"> <input name=\"resetCode\" style=\"display:none\"> <input name=\"password\" style=\"display:none\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\"><div ng-message=\"ERROR_act_execute\">{{::\\'ERROR_ACT_EXECUTE\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div class=\"bp16\"><a ng-hide=\"$ctrl.config.showServerUrl || $ctrl.config.fixedServerUrl || $ctrl.hideObject.server\" ng-click=\"$ctrl.config.showServerUrl = true\" href=\"\">{{::\\'ENTRY_CHANGE_SERVER\\' | translate}}</a></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"bp8\"><md-autocomplete ng-initial=\"\" autofocus=\"\" tabindex=\"1\" class=\"pip-combobox w-stretch bm8\" name=\"server\" aria-label=\"URL\" ng-enabled=\"!$ctrl.transaction.busy()\" placeholder=\"{{::\\'ENTRY_SERVER_URL\\' | translate}}\" md-no-cache=\"true\" md-selected-item=\"$ctrl.config.data.serverUrl\" md-search-text=\"$ctrl.config.selected.searchURLs\" md-items=\"item in $ctrl.config.getMatches($ctrl.config.selected.searchURLs)\" md-item-text=\"item\" md-selected-item-change=\"$ctrl.onServerUrlChanged()\" md-search-text-change=\"$ctrl.onChanged()\" md-delay=\"200\" ng-model=\"$ctrl.config.data.serverUrl\" pip-clear-errors=\"\"><span md-highlight-text=\"$ctrl.config.selected.searchURLs\">{{ item }}</span></md-autocomplete></div><md-input-container class=\"pip-no-hint\" style=\"padding-bottom: 4px!important;\"><label ng-if=\"!$ctrl.config.useEmailAsLogin\">{{::\\'LOGIN\\' | translate}}</label> <label ng-if=\"$ctrl.config.useEmailAsLogin\">{{::\\'EMAIL\\' | translate}}</label> <input name=\"login\" type=\"login\" ng-model=\"$ctrl.config.data.login\" required=\"\" step=\"any\" aria-label=\"LOGIN\" pip-clear-errors=\"\" ng-disabled=\"$ctrl.transaction.busy()\" tabindex=\"2\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login).hint && !$ctrl.hideObject.hint && !$ctrl.config.useEmailAsLogin\">{{::\\'HINT_LOGIN\\' | translate}}</div><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login).hint && !$ctrl.hideObject.hint && $ctrl.config.useEmailAsLogin\">{{::\\'HINT_EMAIL\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login)\" class=\"md-input-error\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'ERROR_LOGIN_INVALID\\' | translate }}</div><div ng-message=\"ERROR_NO_LOGIN\">{{::\\'ERROR_NO_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_WRONG_LOGIN\">{{::\\'ERROR_WRONG_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_LOGIN_NOT_FOUND\">{{::\\'ERROR_LOGIN_NOT_FOUND\\' | translate}}</div></div></md-input-container><md-input-container class=\"pip-no-hint\"><label>{{::\\'ENTRY_RESET_CODE\\' | translate}}</label> <input name=\"resetCode\" ng-disabled=\"$ctrl.transaction.busy()\" autocomplete=\"off\" aria-label=\"CODE\" ng-model=\"$ctrl.config.data.resetCode\" required=\"\" tabindex=\"3\" pip-clear-errors=\"\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.resetCode).hint && !$ctrl.hideObject.hint\">{{::\\'ENTRY_RESET_CODE\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.resetCode)\" class=\"md-input-error\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'ERROR_CODE_WRONG\\' | translate }}</div><div ng-message=\"ERROR_WRONG_CODE\">{{::\\'ERROR_WRONG_CODE\\' | translate}}</div></div></md-input-container><md-input-container class=\"pip-no-hint\" style=\"padding-bottom: 4px!important;\"><label>{{::\\'NEW_PASSWORD_SET\\' | translate}}</label> <input name=\"passwordNew\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" autocomplete=\"off\" type=\"password\" tabindex=\"4\" ng-model=\"$ctrl.config.data.password\" required=\"\" minlength=\"6\" aria-label=\"password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordNew).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordNew)\" class=\"md-input-error\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'MINLENGTH_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'MINLENGTH_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div></div></md-input-container></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('signin/Signin.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-signin-panel pipfixedserverurl=\"$ctrl.fixedServerUrl\" class=\"scroll-y\"></pip-signin-panel></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('signin/SigninDialog.html',\n    '<md-dialog class=\"pip-entry\"><md-dialog-content><pip-signin-panel pip-goto-signup-dialog=\"$ctrl.pipGotoSignupDialog\" pip-goto-recover-password-dialog=\"$ctrl.pipGotoRecoverPasswordDialog\"></pip-signin-panel></md-dialog-content></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('signin/SigninPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 pip-translate=\"SIGNIN_TITLE\" ng-if=\"!$ctrl.hideObject.title\"></h2><form name=\"form\" novalidate=\"\"><input type=\"password\" style=\"display:none\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\"><div ng-message=\"ERROR_act_execute\">{{::\\'ERROR_ACT_EXECUTE\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_ACCOUNT_LOCKED\">{{::\\'ERROR_ACCOUNT_LOCKED\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div class=\"bp16\"><a ng-hide=\"$ctrl.config.showServerUrl || $ctrl.config.fixedServerUrl || $ctrl.hideObject.server\" ng-click=\"$ctrl.config.showServerUrl = true\" href=\"\" id=\"link-server-url\" pip-test=\"link-server-url\">{{::\\'ENTRY_CHANGE_SERVER\\' | translate}}</a></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"bp8\"><md-autocomplete ng-initial=\"\" autofocus=\"\" tabindex=\"1\" class=\"pip-combobox w-stretch bm8\" name=\"server\" placeholder=\"{{::\\'ENTRY_SERVER_URL\\' | translate}}\" md-no-cache=\"true\" md-selected-item=\"$ctrl.config.data.serverUrl\" md-search-text=\"$ctrl.config.selected.searchURLs\" md-items=\"item in $ctrl.config.getMatches($ctrl.config.selected.searchURLs)\" md-item-text=\"item\" md-selected-item-change=\"$ctrl.onServerUrlChanged()\" md-search-text-change=\"$ctrl.onChanged()\" md-delay=\"200\" ng-model=\"$ctrl.config.data.serverUrl\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" pip-test=\"autocomplete-server\"><span md-highlight-text=\"$ctrl.config.selected.searchURLs\">{{item}}</span></md-autocomplete></div><md-input-container class=\"display bp4\"><label ng-if=\"!$ctrl.config.useEmailAsLogin\">{{::\\'LOGIN\\' | translate}}</label> <label ng-if=\"$ctrl.config.useEmailAsLogin\">{{::\\'EMAIL\\' | translate}}</label> <input name=\"login\" ng-model=\"$ctrl.config.data.login\" required=\"\" step=\"any\" ng-keypress=\"$ctrl.onEnter($event)\" aria-label=\"LOGIN\" pip-clear-errors=\"\" ng-disabled=\"$ctrl.transaction.busy()\" tabindex=\"2\" pip-test=\"input-login\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login).hint && !$ctrl.hideObject.hint && !$ctrl.config.useEmailAsLogin\">{{::\\'HINT_LOGIN\\' | translate}}</div><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login).hint && !$ctrl.hideObject.hint && $ctrl.config.useEmailAsLogin\">{{::\\'HINT_EMAIL\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.login)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'ERROR_LOGIN_INVALID\\' | translate }}</div><div ng-message=\"ERROR_WRONG_LOGIN\">{{::\\'ERROR_WRONG_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_NO_LOGIN\">{{::\\'ERROR_NO_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_LOGIN_NOT_FOUND\">{{::\\'ERROR_LOGIN_NOT_FOUND\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\"><label>{{::\\'PASSWORD\\' | translate}}</label> <input name=\"password\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" type=\"password\" tabindex=\"3\" ng-model=\"$ctrl.config.data.password\" ng-keypress=\"$ctrl.onEnter($event)\" required=\"\" minlength=\"6\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password).hint && !$ctrl.hideObject.hint\">{{::\\'SIGNIN_HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'SIGNIN_HINT_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div></div></md-input-container><a href=\"\" class=\"display bm16\" ng-if=\"!$ctrl.hideObject.forgotPassword\" ng-click=\"$ctrl.gotoRecoverPassword()\" tabindex=\"4\">{{::\\'SIGNIN_FORGOT_PASSWORD\\' | translate}}</a><md-checkbox ng-disabled=\"$ctrl.transaction.busy()\" ng-if=\"!$ctrl.hideObject.forgotPassword\" md-no-ink=\"\" class=\"lm0\" aria-label=\"{{\\'SIGNIN_REMEMBER\\' | translate}}\" tabindex=\"5\" ng-model=\"$ctrl.config.data.remember\" pip-test-checkbox=\"remember\"><label class=\"label-check\">{{::\\'SIGNIN_REMEMBER\\' | translate}}</label></md-checkbox><div style=\"height: 36px; overflow: hidden;\"><md-button ng-if=\"!$ctrl.transaction.busy()\" ng-click=\"$ctrl.onSignin()\" aria-label=\"SIGNIN\" class=\"md-raised md-accent w-stretch m0\" tabindex=\"6\" type=\"submit\" xxng-disabled=\"($ctrl.config.data.login == undefined) || $ctrl.config.data.login.length == 0 || $ctrl.config.data.serverUrl == \\'\\' || $ctrl.config.data.serverUrl == undefined || $ctrl.config.data.serverUrl.length == 0 || ($ctrl.config.data.password == undefined)\" pip-test=\"button-signin\">{{::\\'SIGNIN_TITLE\\' | translate}}</md-button><md-button ng-if=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" class=\"md-raised md-warn m0 w-stretch\" tabindex=\"5\" aria-label=\"ABORT\" pip-test=\"button-cancel\">{{::\\'CANCEL\\' | translate}}</md-button></div><div class=\"tm24 layout-row\" ng-if=\"!$ctrl.config.adminOnly && $ctrl.pipMedia(\\'gt-xs\\') && !$ctrl.hideObject.signup\"><p class=\"m0 text-small\">{{::\\'SIGNIN_NOT_MEMBER\\' | translate}} <a href=\"\" ng-click=\"$ctrl.gotoSignup()\" tabindex=\"6\">{{::\\'SIGNIN_SIGNUP_HERE\\' | translate}}</a></p></div><div class=\"tm24 divider-top text-signup\" ng-if=\"!$ctrl.config.adminOnly && $ctrl.pipMedia(\\'xs\\') && !$ctrl.hideObject.signup\"><div class=\"h48 layout-row layout-align-center-end\"><p class=\"m0 text-small\">{{::\\'SIGNIN_NOT_MEMBER\\' | translate}}</p></div><div class=\"h48 layout-row layout-align-center-start\"><a class=\"text-small\" ng-click=\"$ctrl.gotoSignup()\" href=\"\" tabindex=\"6\">{{::\\'SIGNIN_SIGNUP_HERE\\' | translate}}</a></div></div></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('signup/Signup.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><pip-signup-panel class=\"scroll-y\"></pip-signup-panel></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('signup/SignupDialog.html',\n    '<md-dialog class=\"pip-entry\"><md-dialog-content><pip-signup-panel pip-goto-signin-dialog=\"$ctrl.pipGotoSigninDialog\" pip-post-signup=\"$ctrl.pipPostSignup\"></pip-signup-panel></md-dialog-content></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('signup/SignupPanel.html',\n    '<div class=\"pip-body\"><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy() && !$ctrl.hideObject.progress\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2 pip-translate=\"SIGNUP_TITLE\" ng-if=\"!$ctrl.hideObject.title\"></h2><form name=\"form\" novalidate=\"\" autocomplete=\"off\"><input type=\"email\" style=\"display:none\"> <input type=\"login\" style=\"display:none\"> <input type=\"password\" style=\"display:none\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\"><div ng-message=\"ERROR_act_execute\">{{::\\'ERROR_ACT_EXECUTE\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div ng-if=\"$ctrl.error\" class=\"text-error bm8 color-error\" md-auto-hide=\"false\">{{::\\'ERROR_SERVER\\' | translate}}</div><div class=\"bp16\"><a ng-hide=\"$ctrl.config.showServerUrl || $ctrl.config.fixedServerUrl || $ctrl.hideObject.server\" ng-click=\"$ctrl.config.showServerUrl = true\" href=\"\">{{::\\'ENTRY_CHANGE_SERVER\\' | translate}}</a></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"bp8\"><md-autocomplete ng-initial=\"\" autofocus=\"\" tabindex=\"1\" class=\"pip-combobox w-stretch bm8\" name=\"server\" ng-enabled=\"!$ctrl.transaction.busy()\" placeholder=\"{{::\\'ENTRY_SERVER_URL\\' | translate}}\" md-no-cache=\"true\" md-selected-item=\"$ctrl.config.data.serverUrl\" md-search-text=\"$ctrl.config.selected.searchURLs\" md-items=\"item in $ctrl.config.getMatches($ctrl.config.selected.searchURLs)\" md-item-text=\"item\" md-selected-item-change=\"$ctrl.onServerUrlChanged()\" md-search-text-change=\"$ctrl.onChanged()\" md-delay=\"200\" ng-model=\"$ctrl.config.data.serverUrl\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\"><span md-highlight-text=\"$ctrl.config.selected.searchURLs\">{{item}}</span></md-autocomplete></div><md-input-container class=\"display bp4\"><label>{{::\\'FULLNAME\\' | translate}}</label> <input name=\"signupFullName\" ng-disabled=\"$ctrl.transaction.busy()\" autocomplete=\"off\" ng-model=\"$ctrl.config.data.name\" ng-init=\"$ctrl.config.data.name = \\'\\'\" required=\"\" tabindex=\"2\" pip-clear-errors=\"\" ng-keypress=\"$ctrl.onEnter($event)\"><div class=\"hint text-overflow w-stretch\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.signupFullName).hint && !$ctrl.hideObject.hint\">{{ ::\\'HINT_FULLNAME\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.signupFullName)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{ ::\\'HINT_FULLNAME\\' | translate}} {{::\\'ERROR_FULLNAME_INVALID\\' | translate }}</div><div ng-message=\"ERROR_NO_NAME\">{{ ::\\'ERROR_NO_NAME\\' | translate }}</div></div></md-input-container><div ng-if=\"!$ctrl.config.useEmailAsLogin\"><md-input-container class=\"display bp4\"><label>{{ ::\\'LOGIN\\' | translate}}</label> <input name=\"signupLogin\" ng-disabled=\"$ctrl.transaction.busy()\" autocomplete=\"off\" ng-model=\"$ctrl.config.data.login\" ng-init=\"$ctrl.config.data.login = \\'\\'\" required=\"\" tabindex=\"2\" pip-clear-errors=\"\" ng-keypress=\"$ctrl.onEnter($event)\"><div class=\"hint text-overflow w-stretch\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.signupLogin).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_LOGIN\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.signupLogin)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'HINT_LOGIN\\' | translate}} {{::\\'ERROR_LOGIN_INVALID\\' | translate }}</div><div ng-message=\"ERROR_WRONG_LOGIN\">{{::\\'ERROR_WRONG_LOGIN\\' | translate}}</div><div ng-message=\"ERROR_NO_LOGIN\">{{::\\'ERROR_NO_LOGIN\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\"><label>{{::\\'EMAIL\\' | translate}}</label> <input name=\"userEmail\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" type=\"email\" tabindex=\"3\" ng-model=\"$ctrl.config.data.email\" xxxxpip-email-unique=\"$ctrl.config.data.email\" ng-change=\"$ctrl.onChangeEmail(\\'userEmail\\')\" ng-model-options=\"{ delay: 500 }\" required=\"\" ng-keypress=\"$ctrl.onEnter($event)\" xxxpip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.userEmail, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_EMAIL\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.userEmail, true)\" md-auto-hide=\"false\"><div ng-message=\"emailUnique\">{{::\\'ERROR_ALREADY_EXIST\\' | translate}}</div><div ng-message=\"required\">{{::\\'ERROR_EMAIL_INVALID\\' | translate }}</div><div ng-message=\"email\">{{::\\'ERROR_EMAIL_INVALID\\' | translate }}</div><div ng-message=\"ERROR_NO_EMAIL\">{{::\\'ERROR_NO_EMAIL\\' | translate}}</div></div></md-input-container></div><div ng-if=\"$ctrl.config.useEmailAsLogin\"><md-input-container class=\"display bp4\" xxxmd-is-error=\"$ctrl.isError($ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.userEmail1))\"><label>{{::\\'EMAIL\\' | translate}}</label> <input name=\"userEmail1\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" type=\"email\" tabindex=\"3\" ng-model=\"$ctrl.config.data.email\" ng-change=\"$ctrl.onChangeEmail(\\'userEmail1\\')\" ng-model-options=\"{ delay: 500 }\" required=\"\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.userEmail1, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_EMAIL\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.userEmail1, true)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'ERROR_EMAIL_INVALID\\' | translate }}</div><div ng-message=\"email\">{{::\\'ERROR_EMAIL_INVALID\\' | translate }}</div><div ng-message=\"emailUnique\">{{::\\'ERROR_ALREADY_EXIST_EMAIL\\' | translate}}</div><div ng-message=\"ERROR_WRONG_LOGIN\">{{::\\'ERROR_WRONG_LOGIN_EMAIL\\' | translate}}</div><div ng-message=\"ERROR_NO_LOGIN\">{{::\\'ERROR_NO_LOGIN_EMAIL\\' | translate}}</div></div></md-input-container></div><md-input-container class=\"display bp4\"><label>{{::\\'PASSWORD_SET\\' | translate}}</label> <input name=\"password\" ng-disabled=\"$ctrl.transaction.busy()\" autocomplete=\"off\" pip-clear-errors=\"\" type=\"password\" tabindex=\"4\" ng-model=\"$ctrl.config.data.password\" required=\"\" minlength=\"6\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.password)\" md-auto-hide=\"false\"><div ng-message=\"required\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"ERROR_WRONG_PASSWORD\" xxxng-if=\"!$ctrl.config.form.password.$pristine\">{{::\\'ERROR_WRONG_PASSWORD\\' | translate}}</div></div></md-input-container><md-input-container class=\"display bp4\" ng-if=\"!$ctrl.hideObject.passwordConfirm\"><label>{{::\\'PASSWORD_CONFIRM\\' | translate}}</label> <input name=\"passwordConfirm\" type=\"password\" tabindex=\"4\" required=\"\" minlength=\"6\" ng-model=\"$ctrl.confirmPassword\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" pip-compare-password-match=\"\" compare-to2=\"$ctrl.config.data.password\" ng-keypress=\"$ctrl.onEnter($event)\" pip-test=\"input-password\"><div class=\"hint\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordConfirm, true).hint && !$ctrl.hideObject.hint\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.passwordConfirm, true)\" md-auto-hide=\"false\"><div ng-message=\"ERROR_compareTo\">{{::\\'PASSWORD_MATCH\\' | translate}}</div><div ng-message=\"required\">{{::\\'HINT_PASSWORD\\' | translate}}</div><div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate}}</div></div></md-input-container><p class=\"text-small-secondary\" ng-if=\"!$ctrl.hideObject.agreement\">{{::\\'SIGNUP_TEXT_11\\' | translate}} <a href=\"#/legal/privacy\" target=\"_blank\">{{::\\'SIGNUP_PRIVACY\\' | translate}}</a> {{::\\'SIGNUP_TEXT_12\\' | translate}} <a href=\"#/legal/services\" target=\"_blank\">{{::\\'SIGNUP_SERVICES\\' | translate}}</a></p><md-button ng-hide=\"$ctrl.transaction.busy()\" class=\"md-raised m0 md-accent w-stretch\" ng-click=\"$ctrl.onSignup()\" aria-label=\"SIGNUP\" type=\"submit\" xxng-disabled=\"$ctrl.config.form.$invalid || ($ctrl.config.form.$pristine && !$ctrl.config.data.email) || $ctrl.config.data.serverUrl.length == 0 || $ctrl.config.data.email.length == 0 || ($ctrl.config.data.login.length == 0 && !$ctrl.config.useEmailAsLogin) || (!$ctrl.config.data.password) || (!$ctrl.config.data.name) || $ctrl.config.data.name.length == 0 || $ctrl.config.data.password.length == 0\">{{::\\'SIGNUP_TITLE\\' | translate}}</md-button><md-button ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" class=\"md-raised md-warn m0 w-stretch\" aria-label=\"ABORT\">{{::\\'CANCEL\\' | translate}}</md-button><div class=\"tm24 layout-row\" ng-if=\"$ctrl.pipMedia(\\'gt-xs\\') && !$ctrl.hideObject.signin\"><p class=\"text-small m0\">{{::\\'SIGNUP_TEXT_2\\' | translate}} <a href=\"\" ng-click=\"$ctrl.gotoSignin()\">{{::\\'SIGNUP_SIGNIN_HERE\\' | translate}}</a></p></div><div class=\"tm24 divider-top\" ng-if=\"$ctrl.pipMedia(\\'xs\\') && !$ctrl.hideObject.signin\" style=\"margin-right: -16px; margin-left: -16px; background-color: rgb(238, 238, 238);\"><div class=\"h48 layout-row layout-align-center-end\"><p class=\"bm0 text-small\">{{::\\'SIGNUP_TEXT_2\\' | translate}}</p></div><div class=\"h48 layout-row layout-align-center-start\"><p class=\"bm0 text-small\"><a href=\"\" ng-click=\"$ctrl.gotoSignin()\">{{::\\'SIGNUP_SIGNIN_HERE\\' | translate}}</a></p></div></div></form></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('verify_email/VerifyEmail.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><div class=\"pip-body\"><div class=\"pip-content layout-column flex\" style=\"position: absolute; top: 0px; right: 0px; left: 0px; bottom: 0px; background-color: #fafafa; z-index: 100;\" ng-if=\"$ctrl.showValidateProgress\"><h2 class=\"p24-flex m0\">{{\\'VERIFY_EMAIL_WAIT\\' | translate}}</h2><div class=\"layout-column flex layout-align-center-center\"><md-progress-circular md-diameter=\"96\"></md-progress-circular></div></div><div class=\"pip-content\"><md-progress-linear ng-show=\"$ctrl.transaction.busy()\" md-mode=\"indeterminate\" class=\"pip-progress-top\"></md-progress-linear><h2>{{\\'VERIFY_EMAIL_TITLE\\' | translate}}</h2><p class=\"title-padding\">{{\\'VERIFY_EMAIL_TEXT_1\\' | translate}}</p><form name=\"form\" novalidate=\"\" ng-init=\"$ctrl.formCreated(form)\" autocomplete=\"off\"><div ng-messages=\"$ctrl.config.form.$serverError\" class=\"text-error color-error bm8\"><div ng-message=\"ERROR_act_execute\">{{::\\'ERROR_ACT_EXECUTE\\' | translate}}</div><div ng-message=\"ERROR_-1\">{{::\\'ERROR_SERVER\\' | translate}}</div><div ng-message=\"ERROR_UNKNOWN\">{{ $ctrl.config.form.$serverError.ERROR_UNKNOWN | translate }}</div></div><div ng-show=\"$ctrl.config.showServerUrl && !$ctrl.hideObject.server\" class=\"tp8 bp8\">{{::\\'ENTRY_SERVER_URL\\' | translate}}: {{ $ctrl.config.data.serverUrl }}</div><div class=\"tp8 bp8\"><span ng-if=\"!$ctrl.config.useEmailAsLogin\">{{::\\'LOGIN\\' | translate}}</span> <span ng-if=\"$ctrl.config.useEmailAsLogin\">{{::\\'EMAIL\\' | translate}}</span> : {{ $ctrl.config.data.login }}</div><md-input-container class=\"pip-no-hint\"><label>{{::\\'ENTRY_VERIFICATION_CODE\\' | translate}}</label> <input name=\"code\" ng-disabled=\"$ctrl.transaction.busy()\" pip-clear-errors=\"\" ng-model=\"$ctrl.config.data.code\" required=\"\" tabindex=\"3\"><div class=\"hint text-overflow w-stretch\" ng-if=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.code).hint && !$ctrl.hideObject.hint\">{{::\\'ENTRY_VERIFICATION_CODE\\' | translate}}</div><div ng-messages=\"$ctrl.touchedErrorsWithHint($ctrl.config.form, $ctrl.config.form.code)\" ng-if=\"!$ctrl.config.form.$pristine\" class=\"md-input-error\"><div ng-message=\"required\">{{::\\'ERROR_CODE_INVALID\\' | translate }}</div><div ng-message=\"ERROR_INVALID_CODE\">{{::\\'ERROR_INVALID_CODE\\' | translate }}</div></div></md-input-container><p>{{\\'VERIFY_EMAIL_TEXT_21\\' | translate}} <a ng-click=\"$ctrl.onRecover()\" class=\"pointer\" href=\"\">{{\\'VERIFY_EMAIL_RESEND\\' | translate}}</a> {{\\'VERIFY_EMAIL_TEXT_22\\' | translate}}</p></form></div></div><div class=\"pip-footer\"><md-button ng-click=\"$ctrl.goBack()\" ng-hide=\"$ctrl.transaction.busy()\" class=\"rm8\" aria-label=\"CANCEL\">{{::\\'CANCEL\\' | translate}}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onVerify()\" ng-hide=\"$ctrl.transaction.busy()\" aria-label=\"VERIFY\" ng-if=\"!$ctrl.showValidateProgress\" type=\"submit\" ng-disabled=\"$ctrl.config.data.code.length == 0 || $ctrl.config.data.login.length == 0 || (!$ctrl.config.data.login && $ctrl.config.form.$pristine) || (!$ctrl.config.data.code)\">{{::\\'VERIFY\\' | translate}}</md-button><md-button class=\"md-warn\" ng-show=\"$ctrl.transaction.busy()\" ng-click=\"$ctrl.transaction.abort()\" aria-label=\"ABORT\">{{::\\'CANCEL\\' | translate}}</md-button></div></pip-card></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipEntry.Templates');\n} catch (e) {\n  module = angular.module('pipEntry.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('verify_email/VerifyEmailSuccess.html',\n    '<div class=\"pip-card-container pip-outer-scroll pip-entry\"><pip-card width=\"400\"><div class=\"pip-footer\"><md-button ng-click=\"$ctrl.onContinue()\" class=\"md-accent\">{{\\'CONTINUE\\' | translate}}</md-button></div><div class=\"pip-body\"><div class=\"pip-content\"><h2>{{\\'VERIFY_EMAIL_TITLE\\' | translate}}</h2><p class=\"title-padding\">{{\\'VERIFY_EMAIL_SUCCESS_TEXT\\' | translate}}</p></div></div></pip-card></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-suite-entry-html.min.js.map\n","import { VerifyEmailModel } from './VerifyEmailModel';\nimport { IEntryDataService } from '../data/IEntryDataService';\nimport { IEntryService } from \"../common/EntryService\";\n\nexport class VerifyEmailViewModel {\n    public model: VerifyEmailModel;\n\n    constructor(\n        pipEntryCommon: any,\n        pipTransaction: pip.services.ITransactionService,\n        $rootScope: ng.IRootScopeService,\n        $location: ng.ILocationService,\n        $state: ng.ui.IStateService,\n        $injector: ng.auto.IInjectorService,\n        pipAuthState: pip.rest.IAuthStateService,\n        pipFormErrors: pip.errors.IFormErrorsService,\n        pipRest: pip.rest.IRestService,\n        pipEntryData: IEntryDataService,\n        pipIdentity: pip.services.IIdentityService,\n        pipEntry: IEntryService\n    ) {\n        \"ngInject\";\n\n        this.model = new VerifyEmailModel(pipEntryCommon, pipTransaction, $rootScope, $location, $state,\n            $injector, pipAuthState, pipFormErrors, pipRest, pipEntryData, pipIdentity, pipEntry);\n    }\n\n    public get transaction(): pip.services.Transaction {\n        return this.model.transaction;\n    }\n\n    public get hideObject(): any {\n        return this.model.hideObject;\n    }\n\n    public get showServerError(): any {\n        return this.model.showServerError;\n    }\n\n    public get config(): any {\n        return this.model.config;\n    }\n\n    public initModel($scope) {\n        this.model.init($scope);\n    }\n\n    public onVerify(successCallback?: (data: any) => void, errorCallback?: (error: any) => void) {\n        this.model.onVerify(successCallback, errorCallback);\n    }\n\n    public onRecover() {\n        this.model.onRecover();\n    }\n\n    public onContinue() {\n        this.model.onContinue();\n    }\n\n    public onCancel() {\n        this.model.onCancel();\n    }\n}\n\nangular.module('pipEntry.VerifyEmail')\n    .service('pipVerifyEmailViewModel', VerifyEmailViewModel);"]}